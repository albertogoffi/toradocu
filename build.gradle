buildscript {
  ext.kotlin_version = '1.0.6'

  repositories {
    mavenCentral()
  }

  dependencies {
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
  }
}

plugins {
  id 'java'
  id 'application'
  id 'com.github.johnrengelman.shadow' version '1.2.3' // For creating the fat JAR
  id 'de.undercouch.download' version '3.1.2' // For the download tasks
  id 'eclipse' // Support for Eclipse projects
  id 'idea' // Support for IntelliJ IDEA projects
}
apply plugin: 'kotlin'

sourceCompatibility = 1.8
targetCompatibility = 1.8
mainClassName = "org.toradocu.Toradocu"
version = '1.0'
jar {
  manifest {
    attributes 'Implementation-Title': 'Toradocu', 'Implementation-Version': version
  }
}

/* Pass Java system properties from the command line to test tasks. */
tasks.withType(Test) {
  systemProperties System.getProperties()
}

/* Create Javadoc documentation as part of build task. */
build.dependsOn javadoc

javadoc {
  excludes += 'org/toradocu/doclet/**'
}

/* Disable unneeded tasks. */
startScripts.enabled = false
distZip.enabled = false
distTar.enabled = false
assemble.enabled = false

compileJava {
  options.compilerArgs << '-Xlint:unchecked'
}

test {
  // Print standard output during tests execution.
  testLogging {
    showExceptions = true
    showCauses = true
    showStackTraces = true
  //  events = ['failed', 'standardError']
  }
}

repositories {
  mavenCentral()
}

dependencies {
  compile fileTree(dir: 'lib', include: '*.jar')
  compile 'edu.stanford.nlp:stanford-corenlp:3.6.0'
  compile 'edu.stanford.nlp:stanford-corenlp:3.6.0:models-english'
  compile 'org.jsoup:jsoup:1.8.3' // JSoup used only to remove HTML tags in comments.
  compile 'com.github.javaparser:javaparser-core:2.5.1'
  compile 'com.beust:jcommander:1.64'
  compile 'com.google.code.gson:gson:2.8.0'
  compile 'commons-io:commons-io:2.5'
  compile 'org.slf4j:slf4j-simple:1.7.21'
  compile 'org.apache.commons:commons-lang3:3.4'
  compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
  testCompile 'junit:junit:4.12'
  testCompile 'org.hamcrest:java-hamcrest:2.0.0.0'
}

task wrapper(type: Wrapper) {
  gradleVersion = '3.5'
}

/* Copy resources needed for doclet API to build directory after compilation. */
task copyDocletResources1(type: Copy) {
  from 'src/main/java/org/toradocu/doclet/internal/toolkit/resources'
  into 'build/classes/main/org/toradocu/doclet/internal/toolkit/resources'
}

task copyDocletResources2(type: Copy) {
  from 'src/main/java/org/toradocu/doclet/formats/html/resources'
  into 'build/classes/main/org/toradocu/doclet/formats/html/resources'
}

compileJava.doLast {
  tasks.copyDocletResources1.execute()
  tasks.copyDocletResources2.execute()
}

import de.undercouch.gradle.tasks.download.Download

/* Downloads binaries of the systems used to measure Toradocu's precision and recall. */
task downloadBinaries(type: Download) {
  src ([
    'http://repo1.maven.org/maven2/org/apache/commons/commons-collections4/4.1/commons-collections4-4.1.jar',
    'http://repo1.maven.org/maven2/org/apache/commons/commons-math3/3.6.1/commons-math3-3.6.1.jar',
    'http://repo1.maven.org/maven2/com/google/guava/guava/19.0/guava-19.0.jar',
    'http://repo1.maven.org/maven2/org/jgrapht/jgrapht-core/0.9.2/jgrapht-core-0.9.2.jar',
    'https://github.com/mernst/plume-lib/releases/download/v1.1.0/plume-lib-1.1.0.tar.gz',
    'http://www.inf.usi.ch/phd/goffi/freecol-0.11.6.jar',
    'http://central.maven.org/maven2/commons-cli/commons-cli/1.3.1/commons-cli-1.3.1.jar',
    'http://repo1.maven.org/maven2/org/graphstream/gs-core/1.3/gs-core-1.3.jar'
  ])
  dest 'src/test/resources/bin'
  onlyIfNewer true
  overwrite false
}

/* Extracts binaries that were not already downloaded directly. */
task extractBinaries(type: Exec, dependsOn: 'downloadBinaries') {
  description "Extract .jar files from downloaded files"
  workingDir 'src/test/resources/bin'
  commandLine "bash", "-c", "tar xzf plume-lib-1.1.0.tar.gz --strip-components=2 plume-lib-1.1.0/java/plume.jar && mv plume.jar plume-lib-1.1.0.jar"
}

/* Downloads sources of the systems used to measure Toradocu's precision and recall. */
task downloadSources(type: Download) {
  src ([
    'https://www.apache.org/dist/commons/collections/source/commons-collections4-4.1-src.zip',
    'https://www.apache.org/dist/commons/math/source/commons-math3-3.6.1-src.zip',
    'http://repo1.maven.org/maven2/com/google/guava/guava/19.0/guava-19.0-sources.jar',
    'http://repo1.maven.org/maven2/org/jgrapht/jgrapht-core/0.9.2/jgrapht-core-0.9.2-sources.jar',
    'https://github.com/mernst/plume-lib/releases/download/v1.1.0/plume-lib-1.1.0.tar.gz',
    'http://www.inf.usi.ch/phd/goffi/freecol-0.11.6-src.zip',
    'http://repo1.maven.org/maven2/org/graphstream/gs-core/1.3/gs-core-1.3-sources.jar'
  ])
  dest 'src/test/resources/src'
  onlyIfNewer true
  overwrite false
}

/* Extracts source archives of the systems used to measure Toradocu's precision and recall. */
task extractSources(dependsOn: downloadSources) {
  doLast {
    file('src/test/resources/src').listFiles().findAll {
      it.name.endsWith('.zip') || it.name.endsWith('.tar.gz') || it.name.endsWith('.jar')
    }.each { file ->
      if (file.name.endsWith('.zip')) {
        copy {
          from zipTree(file)
          into 'src/test/resources/src/'
          fileMode 0664
        }
      } else if (file.name.endsWith('.tar.gz')) {
        copy {
          from tarTree(resources.gzip(file))
          into 'src/test/resources/src/'
          fileMode 0664
        }
      } else if (file.name.endsWith('.jar')) {
        def fileName = file.name
        def index = fileName.lastIndexOf('.')
        def fileBaseName = fileName.substring(0, index)
        copy {
          from zipTree(file)
          into 'src/test/resources/src/' + fileBaseName
          fileMode 0664
        }
      }
    }
  }
}

task removeTestOutputDirs(type: Delete) {
  delete 'build/test-results', 'aspects'
}

test.dependsOn removeTestOutputDirs, extractSources, extractBinaries

/* Make Emacs TAGS table */
task tags(type: Exec) {
  description "Run etags to create an Emacs TAGS table"
  environment PATH: "$System.env.PATH:$buildDir/utils/plume-lib/bin"
  commandLine "bash", "-c", "find src/ -name *.java | sort-directory-order | xargs etags"
}

/* Install the git pre-commit hook */
task installhook(type: Exec) {
  commandLine 'bash', '-c' , 'if [ -e .git -a ! -f .git/hooks/pre-commit ]; then ln -s ../../git-pre-commit-hook.sh .git/hooks/pre-commit; fi'
}

gradle.taskGraph.beforeTask { Task task ->
  installhook.execute()
}

shadowJar {
  // default: "${baseName}-${version}-${classifier}.${extension}",
  // where ${baseName} is the name of the directory into which the toradocu
  // repository is cloned.
  archiveName = "toradocu-${version}-${classifier}.${extension}"
}

/* Clone the git repository containing the scripts to format the code */
task getCodeFormatScripts(type: Exec) {
  commandLine "bash", "-c", "(cd .run-google-java-format && git pull -q)" +
          " || " +
          "git clone -q https://github.com/plume-lib/run-google-java-format.git .run-google-java-format"
}

/* Check if the code is properly formatted */
task checkCodeStyle(type: Exec) {
  description "Run checkCodeStyle to check if the source code is properly formatted"
  commandLine "bash", "-c", "find src -name \"*.java\" -type f " +
          "-not -path \"src/test/resources/src/*\" " +
          "-not -path \"src/test/resources/aspects/*\" " +
          "-not -path \"src/main/resources/AspectTemplate.java\" " +
          "| xargs ./.run-google-java-format/check-google-java-format.py"
}
checkCodeStyle.dependsOn getCodeFormatScripts
build.dependsOn checkCodeStyle

/* Format the code according to the Google Java format code style */
task formatCode(type: Exec) {
  description "Run formatCode to properly format the source code"
  commandLine "bash", "-c", "find src -name \"*.java\" -type f " +
          "-not -path \"src/test/resources/src/*\" " +
          "-not -path \"src/test/resources/aspects/*\" " +
          "-not -path \"src/main/resources/AspectTemplate.java\" " +
          "| xargs ./.run-google-java-format/run-google-java-format.py"
}
formatCode.dependsOn getCodeFormatScripts

/* Downloads dependencies needed for the tutorial. */
task tutorial(type: Download) {
  src ([
    'http://search.maven.org/remotecontent?filepath=junit/junit/4.12/junit-4.12.jar',
    'http://search.maven.org/remotecontent?filepath=org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar',
    'http://central.maven.org/maven2/org/aspectj/aspectjtools/1.8.9/aspectjtools-1.8.9.jar',
    'http://central.maven.org/maven2/org/aspectj/aspectjweaver/1.8.9/aspectjweaver-1.8.9.jar',
    'http://central.maven.org/maven2/org/aspectj/aspectjrt/1.8.9/aspectjrt-1.8.9.jar'
  ])
  dest 'tutorial'
  onlyIfNewer true
  overwrite false
}
tutorial.dependsOn shadowJar
