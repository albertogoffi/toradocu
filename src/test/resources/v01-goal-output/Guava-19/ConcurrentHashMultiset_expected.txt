com.google.common.collect.AbstractMultiset.add(E) throws java.lang.IllegalArgumentException if Integer.MAX_VALUE occurrences of element are already contained in this multiset ==> [target.count(args[0]==Integer.MAX_VALUE)]
com.google.common.collect.AbstractMultiset.add(E) throws java.lang.NullPointerException if element is null and this implementation does not permit null elements ==> [args[0]==null]
com.google.common.collect.ConcurrentHashMultiset.add(E, int) throws java.lang.IllegalArgumentException if occurrences is negative, or if the resulting amount would exceed Integer.MAX_VALUE ==> [args[1]<0||target.count(args[0])+args[1]>Integer.MAX_VALUE]
com.google.common.collect.ConcurrentHashMultiset.add(E, int) throws java.lang.IllegalArgumentException if occurrences is negative, or if this operation would result in more than Integer.MAX_VALUE occurrences of the element ==> [args[1]<0||target.count(args[0])+args[1]>Integer.MAX_VALUE]
com.google.common.collect.ConcurrentHashMultiset.add(E, int) throws java.lang.NullPointerException if element is null and this implementation does not permit null elements. Note that if occurrences is zero, the implementation may opt to return normally. ==> [args[0]==null]
com.google.common.collect.ConcurrentHashMultiset.remove(java.lang.Object, int) throws java.lang.IllegalArgumentException if occurrences is negative ==> [args[1]<0]
com.google.common.collect.ConcurrentHashMultiset.removeExactly(java.lang.Object, int) throws java.lang.IllegalArgumentException if occurrences is negative ==> [args[1]<0]
com.google.common.collect.ConcurrentHashMultiset.setCount(E, int) throws java.lang.IllegalArgumentException if count is negative ==> [args[1]<0]
com.google.common.collect.ConcurrentHashMultiset.setCount(E, int) throws java.lang.NullPointerException if element is null and this implementation does not permit null elements. Note that if count is zero, the implementor may optionally return zero instead. ==> [args[0]==null]
com.google.common.collect.ConcurrentHashMultiset.setCount(E, int, int) throws java.lang.IllegalArgumentException if expectedOldCount or newCount is negative ==> [args[1]<0||args[2]<0]
com.google.common.collect.ConcurrentHashMultiset.setCount(E, int, int) throws java.lang.IllegalArgumentException if oldCount or newCount is negative ==> [args[1]<0||args[2]<0]
com.google.common.collect.ConcurrentHashMultiset.setCount(E, int, int) throws java.lang.NullPointerException if element is null and the implementation does not permit null elements. Note that if oldCount and newCount are both zero, the implementor may optionally return true instead. ==> [args[0]==null]
