[
  {
    "signature": "AbstractGraph()",
    "name": "AbstractGraph",
    "containingClass": {
      "qualifiedName": "org.jgrapht.graph.AbstractGraph",
      "name": "AbstractGraph",
      "isArray": false
    },
    "targetClass": "org.jgrapht.graph.AbstractGraph",
    "isVarArgs": false,
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "containsEdge(java.lang.Object sourceVertex,java.lang.Object targetVertex)",
    "name": "containsEdge",
    "containingClass": {
      "qualifiedName": "org.jgrapht.graph.AbstractGraph",
      "name": "AbstractGraph",
      "isArray": false
    },
    "targetClass": "org.jgrapht.graph.AbstractGraph",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "sourceVertex"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "targetVertex"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "removeAllEdges(java.util.Collection edges)",
    "name": "removeAllEdges",
    "containingClass": {
      "qualifiedName": "org.jgrapht.graph.AbstractGraph",
      "name": "AbstractGraph",
      "isArray": false
    },
    "targetClass": "org.jgrapht.graph.AbstractGraph",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "edges"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "removeAllEdges(java.lang.Object sourceVertex,java.lang.Object targetVertex)",
    "name": "removeAllEdges",
    "containingClass": {
      "qualifiedName": "org.jgrapht.graph.AbstractGraph",
      "name": "AbstractGraph",
      "isArray": false
    },
    "targetClass": "org.jgrapht.graph.AbstractGraph",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Set",
      "name": "Set",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "sourceVertex"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "targetVertex"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "removeAllVertices(java.util.Collection vertices)",
    "name": "removeAllVertices",
    "containingClass": {
      "qualifiedName": "org.jgrapht.graph.AbstractGraph",
      "name": "AbstractGraph",
      "isArray": false
    },
    "targetClass": "org.jgrapht.graph.AbstractGraph",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "vertices"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "toString()",
    "name": "toString",
    "containingClass": {
      "qualifiedName": "org.jgrapht.graph.AbstractGraph",
      "name": "AbstractGraph",
      "isArray": false
    },
    "targetClass": "org.jgrapht.graph.AbstractGraph",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "String",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "a string representation of this graph.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "assertVertexExist(java.lang.Object v)",
    "name": "assertVertexExist",
    "containingClass": {
      "qualifiedName": "org.jgrapht.graph.AbstractGraph",
      "name": "AbstractGraph",
      "isArray": false
    },
    "targetClass": "org.jgrapht.graph.AbstractGraph",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "v"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          },
          "name": "v"
        },
        "comment": "vertex",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if this assertion holds.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.NullPointerException",
          "name": "NullPointerException",
          "isArray": false
        },
        "codeTags": [
          "null"
        ],
        "comment": "if specified vertex is null.",
        "kind": "THROWS",
        "condition": "args[0]==null"
      },
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if specified vertex does not exist in this graph.",
        "kind": "THROWS",
        "condition": "receiverObjectID.containsVertex(arg[0])==false"
      }
    ]
  },
  {
    "signature": "removeAllEdges(java.lang.Object[] edges)",
    "name": "removeAllEdges",
    "containingClass": {
      "qualifiedName": "org.jgrapht.graph.AbstractGraph",
      "name": "AbstractGraph",
      "isArray": false
    },
    "targetClass": "org.jgrapht.graph.AbstractGraph",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object[]",
          "name": "Object[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          }
        },
        "name": "edges"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object[]",
            "name": "Object[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "java.lang.Object",
              "name": "Object",
              "isArray": false
            }
          },
          "name": "edges"
        },
        "comment": "edges to be removed from this graph.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if this graph changed as a result of the call.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "toStringFromSets(java.util.Collection vertexSet,java.util.Collection edgeSet,boolean directed)",
    "name": "toStringFromSets",
    "containingClass": {
      "qualifiedName": "org.jgrapht.graph.AbstractGraph",
      "name": "AbstractGraph",
      "isArray": false
    },
    "targetClass": "org.jgrapht.graph.AbstractGraph",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "vertexSet"
      },
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "edgeSet"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "directed"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.Collection",
            "name": "Collection",
            "isArray": false
          },
          "name": "vertexSet"
        },
        "comment": "the vertex set V to be printed",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.Collection",
            "name": "Collection",
            "isArray": false
          },
          "name": "edgeSet"
        },
        "comment": "the edge set E to be printed",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "directed"
        },
        "comment": "true to use parens for each edge (representing directed); false to use curly braces (representing undirected)",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a string representation of (V,E)",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "hashCode()",
    "name": "hashCode",
    "containingClass": {
      "qualifiedName": "org.jgrapht.graph.AbstractGraph",
      "name": "AbstractGraph",
      "isArray": false
    },
    "targetClass": "org.jgrapht.graph.AbstractGraph",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "the hash code value this graph",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "equals(java.lang.Object obj)",
    "name": "equals",
    "containingClass": {
      "qualifiedName": "org.jgrapht.graph.AbstractGraph",
      "name": "AbstractGraph",
      "isArray": false
    },
    "targetClass": "org.jgrapht.graph.AbstractGraph",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "obj"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          },
          "name": "obj"
        },
        "comment": "object to be compared for equality with this graph",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if the specified object is equal to this graph",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  }
]
