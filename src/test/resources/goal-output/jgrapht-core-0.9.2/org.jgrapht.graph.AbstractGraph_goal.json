[
  {
    "containingClass": {
      "isArray": false,
      "name": "AbstractGraph",
      "qualifiedName": "org.jgrapht.graph.AbstractGraph"
    },
    "isVarArgs": false,
    "name": "AbstractGraph",
    "paramTags": [],
    "parameters": [],
    "signature": "AbstractGraph()",
    "targetClass": "org.jgrapht.graph.AbstractGraph",
    "throwsTags": []
  },
  {
    "containingClass": {
      "isArray": false,
      "name": "AbstractGraph",
      "qualifiedName": "org.jgrapht.graph.AbstractGraph"
    },
    "isVarArgs": false,
    "name": "containsEdge",
    "paramTags": [],
    "parameters": [
      {
        "name": "sourceVertex",
        "type": {
          "isArray": false,
          "name": "Object",
          "qualifiedName": "java.lang.Object"
        }
      },
      {
        "name": "targetVertex",
        "type": {
          "isArray": false,
          "name": "Object",
          "qualifiedName": "java.lang.Object"
        }
      }
    ],
    "returnTag": {
      "comment": "true if this graph contains the specified edge.",
      "condition": "",
      "kind": "RETURN"
    },
    "returnType": {
      "isArray": false,
      "name": "boolean",
      "qualifiedName": "boolean"
    },
    "signature": "containsEdge(java.lang.Object sourceVertex,java.lang.Object targetVertex)",
    "targetClass": "org.jgrapht.graph.AbstractGraph",
    "throwsTags": []
  },
  {
    "containingClass": {
      "isArray": false,
      "name": "AbstractGraph",
      "qualifiedName": "org.jgrapht.graph.AbstractGraph"
    },
    "isVarArgs": false,
    "name": "removeAllEdges",
    "paramTags": [],
    "parameters": [
      {
        "name": "edges",
        "type": {
          "isArray": false,
          "name": "Collection",
          "qualifiedName": "java.util.Collection"
        }
      }
    ],
    "returnTag": {
      "comment": "true if this graph changed as a result of the call",
      "condition": "",
      "kind": "RETURN"
    },
    "returnType": {
      "isArray": false,
      "name": "boolean",
      "qualifiedName": "boolean"
    },
    "signature": "removeAllEdges(java.util.Collection edges)",
    "targetClass": "org.jgrapht.graph.AbstractGraph",
    "throwsTags": []
  },
  {
    "containingClass": {
      "isArray": false,
      "name": "AbstractGraph",
      "qualifiedName": "org.jgrapht.graph.AbstractGraph"
    },
    "isVarArgs": false,
    "name": "removeAllEdges",
    "paramTags": [],
    "parameters": [
      {
        "name": "sourceVertex",
        "type": {
          "isArray": false,
          "name": "Object",
          "qualifiedName": "java.lang.Object"
        }
      },
      {
        "name": "targetVertex",
        "type": {
          "isArray": false,
          "name": "Object",
          "qualifiedName": "java.lang.Object"
        }
      }
    ],
    "returnTag": {
      "comment": "the removed edges, or null if either vertex is not part of graph",
      "condition": "",
      "kind": "RETURN"
    },
    "returnType": {
      "isArray": false,
      "name": "Set",
      "qualifiedName": "java.util.Set"
    },
    "signature": "removeAllEdges(java.lang.Object sourceVertex,java.lang.Object targetVertex)",
    "targetClass": "org.jgrapht.graph.AbstractGraph",
    "throwsTags": []
  },
  {
    "containingClass": {
      "isArray": false,
      "name": "AbstractGraph",
      "qualifiedName": "org.jgrapht.graph.AbstractGraph"
    },
    "isVarArgs": false,
    "name": "removeAllVertices",
    "paramTags": [
      {
        "comment": "vertices to be removed from this graph.",
        "condition": "",
        "kind": "@param",
        "parameter": {
          "name": "vertices",
          "type": {
            "isArray": false,
            "name": "Collection",
            "qualifiedName": "java.util.Collection"
          }
        }
      }
    ],
    "parameters": [
      {
        "name": "vertices",
        "type": {
          "isArray": false,
          "name": "Collection",
          "qualifiedName": "java.util.Collection"
        }
      }
    ],
    "returnTag": {
      "comment": "true if this graph changed as a result of the call",
      "condition": "",
      "kind": "RETURN"
    },
    "returnType": {
      "isArray": false,
      "name": "boolean",
      "qualifiedName": "boolean"
    },
    "signature": "removeAllVertices(java.util.Collection vertices)",
    "targetClass": "org.jgrapht.graph.AbstractGraph",
    "throwsTags": []
  },
  {
    "containingClass": {
      "isArray": false,
      "name": "AbstractGraph",
      "qualifiedName": "org.jgrapht.graph.AbstractGraph"
    },
    "isVarArgs": false,
    "name": "toString",
    "paramTags": [],
    "parameters": [],
    "returnTag": {
      "comment": "a string representation of this graph.",
      "condition": "",
      "kind": "RETURN"
    },
    "returnType": {
      "isArray": false,
      "name": "String",
      "qualifiedName": "java.lang.String"
    },
    "signature": "toString()",
    "targetClass": "org.jgrapht.graph.AbstractGraph",
    "throwsTags": []
  },
  {
    "containingClass": {
      "isArray": false,
      "name": "AbstractGraph",
      "qualifiedName": "org.jgrapht.graph.AbstractGraph"
    },
    "isVarArgs": false,
    "name": "assertVertexExist",
    "paramTags": [
      {
        "comment": "vertex",
        "condition": "",
        "kind": "@param",
        "parameter": {
          "name": "v",
          "type": {
            "isArray": false,
            "name": "Object",
            "qualifiedName": "java.lang.Object"
          }
        }
      }
    ],
    "parameters": [
      {
        "name": "v",
        "type": {
          "isArray": false,
          "name": "Object",
          "qualifiedName": "java.lang.Object"
        }
      }
    ],
    "returnTag": {
      "comment": "true if this assertion holds.",
      "condition": "",
      "kind": "RETURN"
    },
    "returnType": {
      "isArray": false,
      "name": "boolean",
      "qualifiedName": "boolean"
    },
    "signature": "assertVertexExist(java.lang.Object v)",
    "targetClass": "org.jgrapht.graph.AbstractGraph",
    "throwsTags": [
      {
        "comment": "if specified vertex is null.",
        "condition": "args[0]==null",
        "exception": {
          "isArray": false,
          "name": "NullPointerException",
          "qualifiedName": "java.lang.NullPointerException"
        },
        "kind": "@throws"
      },
      {
        "comment": "if specified vertex does not exist in this graph.",
        "condition": "target.containsVertex(arg[0])==false",
        "exception": {
          "isArray": false,
          "name": "IllegalArgumentException",
          "qualifiedName": "java.lang.IllegalArgumentException"
        },
        "kind": "@throws"
      }
    ]
  },
  {
    "containingClass": {
      "isArray": false,
      "name": "AbstractGraph",
      "qualifiedName": "org.jgrapht.graph.AbstractGraph"
    },
    "isVarArgs": false,
    "name": "removeAllEdges",
    "paramTags": [
      {
        "comment": "edges to be removed from this graph.",
        "condition": "",
        "kind": "@param",
        "parameter": {
          "name": "edges",
          "type": {
            "componentType": {
              "isArray": false,
              "name": "Object",
              "qualifiedName": "java.lang.Object"
            },
            "isArray": true,
            "name": "Object[]",
            "qualifiedName": "java.lang.Object[]"
          }
        }
      }
    ],
    "parameters": [
      {
        "name": "edges",
        "type": {
          "componentType": {
            "isArray": false,
            "name": "Object",
            "qualifiedName": "java.lang.Object"
          },
          "isArray": true,
          "name": "Object[]",
          "qualifiedName": "java.lang.Object[]"
        }
      }
    ],
    "returnTag": {
      "comment": "true if this graph changed as a result of the call.",
      "condition": "",
      "kind": "RETURN"
    },
    "returnType": {
      "isArray": false,
      "name": "boolean",
      "qualifiedName": "boolean"
    },
    "signature": "removeAllEdges(java.lang.Object[] edges)",
    "targetClass": "org.jgrapht.graph.AbstractGraph",
    "throwsTags": []
  },
  {
    "containingClass": {
      "isArray": false,
      "name": "AbstractGraph",
      "qualifiedName": "org.jgrapht.graph.AbstractGraph"
    },
    "isVarArgs": false,
    "name": "toStringFromSets",
    "paramTags": [
      {
        "comment": "the vertex set V to be printed",
        "condition": "",
        "kind": "@param",
        "parameter": {
          "name": "vertexSet",
          "type": {
            "isArray": false,
            "name": "Collection",
            "qualifiedName": "java.util.Collection"
          }
        }
      },
      {
        "comment": "the edge set E to be printed",
        "condition": "",
        "kind": "@param",
        "parameter": {
          "name": "edgeSet",
          "type": {
            "isArray": false,
            "name": "Collection",
            "qualifiedName": "java.util.Collection"
          }
        }
      },
      {
        "comment": "true to use parens for each edge (representing directed); false to use curly braces (representing undirected)",
        "condition": "",
        "kind": "@param",
        "parameter": {
          "name": "directed",
          "type": {
            "isArray": false,
            "name": "boolean",
            "qualifiedName": "boolean"
          }
        }
      }
    ],
    "parameters": [
      {
        "name": "vertexSet",
        "type": {
          "isArray": false,
          "name": "Collection",
          "qualifiedName": "java.util.Collection"
        }
      },
      {
        "name": "edgeSet",
        "type": {
          "isArray": false,
          "name": "Collection",
          "qualifiedName": "java.util.Collection"
        }
      },
      {
        "name": "directed",
        "type": {
          "isArray": false,
          "name": "boolean",
          "qualifiedName": "boolean"
        }
      }
    ],
    "returnTag": {
      "comment": "a string representation of (V,E)",
      "condition": "",
      "kind": "RETURN"
    },
    "returnType": {
      "isArray": false,
      "name": "String",
      "qualifiedName": "java.lang.String"
    },
    "signature": "toStringFromSets(java.util.Collection vertexSet,java.util.Collection edgeSet,boolean directed)",
    "targetClass": "org.jgrapht.graph.AbstractGraph",
    "throwsTags": []
  },
  {
    "containingClass": {
      "isArray": false,
      "name": "AbstractGraph",
      "qualifiedName": "org.jgrapht.graph.AbstractGraph"
    },
    "isVarArgs": false,
    "name": "hashCode",
    "paramTags": [],
    "parameters": [],
    "returnTag": {
      "comment": "the hash code value this graph",
      "condition": "",
      "kind": "RETURN"
    },
    "returnType": {
      "isArray": false,
      "name": "int",
      "qualifiedName": "int"
    },
    "signature": "hashCode()",
    "targetClass": "org.jgrapht.graph.AbstractGraph",
    "throwsTags": []
  },
  {
    "containingClass": {
      "isArray": false,
      "name": "AbstractGraph",
      "qualifiedName": "org.jgrapht.graph.AbstractGraph"
    },
    "isVarArgs": false,
    "name": "equals",
    "paramTags": [
      {
        "comment": "object to be compared for equality with this graph",
        "condition": "",
        "kind": "@param",
        "parameter": {
          "name": "obj",
          "type": {
            "isArray": false,
            "name": "Object",
            "qualifiedName": "java.lang.Object"
          }
        }
      }
    ],
    "parameters": [
      {
        "name": "obj",
        "type": {
          "isArray": false,
          "name": "Object",
          "qualifiedName": "java.lang.Object"
        }
      }
    ],
    "returnTag": {
      "comment": "true if the specified object is equal to this graph",
      "condition": "",
      "kind": "RETURN"
    },
    "returnType": {
      "isArray": false,
      "name": "boolean",
      "qualifiedName": "boolean"
    },
    "signature": "equals(java.lang.Object obj)",
    "targetClass": "org.jgrapht.graph.AbstractGraph",
    "throwsTags": []
  }
]
