[
  {
    "signature": "DirectedAcyclicGraph(java.lang.Class arg0)",
    "name": "DirectedAcyclicGraph",
    "containingClass": {
      "qualifiedName": "org.jgrapht.experimental.dag.DirectedAcyclicGraph",
      "name": "DirectedAcyclicGraph",
      "isArray": false
    },
    "targetClass": "org.jgrapht.experimental.dag.DirectedAcyclicGraph",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Class",
          "name": "Class",
          "isArray": false
        },
        "name": "arg0"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "DirectedAcyclicGraph(org.jgrapht.EdgeFactory ef)",
    "name": "DirectedAcyclicGraph",
    "containingClass": {
      "qualifiedName": "org.jgrapht.experimental.dag.DirectedAcyclicGraph",
      "name": "DirectedAcyclicGraph",
      "isArray": false
    },
    "targetClass": "org.jgrapht.experimental.dag.DirectedAcyclicGraph",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.jgrapht.EdgeFactory",
          "name": "EdgeFactory",
          "isArray": false
        },
        "name": "ef"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "DirectedAcyclicGraph(java.lang.Class arg0,org.jgrapht.experimental.dag.DirectedAcyclicGraph.VisitedFactory visitedFactory,org.jgrapht.experimental.dag.DirectedAcyclicGraph.TopoOrderMappingFactory topoOrderFactory)",
    "name": "DirectedAcyclicGraph",
    "containingClass": {
      "qualifiedName": "org.jgrapht.experimental.dag.DirectedAcyclicGraph",
      "name": "DirectedAcyclicGraph",
      "isArray": false
    },
    "targetClass": "org.jgrapht.experimental.dag.DirectedAcyclicGraph",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Class",
          "name": "Class",
          "isArray": false
        },
        "name": "arg0"
      },
      {
        "type": {
          "qualifiedName": "org.jgrapht.experimental.dag.DirectedAcyclicGraph.VisitedFactory",
          "name": "VisitedFactory",
          "isArray": false
        },
        "name": "visitedFactory"
      },
      {
        "type": {
          "qualifiedName": "org.jgrapht.experimental.dag.DirectedAcyclicGraph.TopoOrderMappingFactory",
          "name": "TopoOrderMappingFactory",
          "isArray": false
        },
        "name": "topoOrderFactory"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "initialize()",
    "name": "initialize",
    "containingClass": {
      "qualifiedName": "org.jgrapht.experimental.dag.DirectedAcyclicGraph",
      "name": "DirectedAcyclicGraph",
      "isArray": false
    },
    "targetClass": "org.jgrapht.experimental.dag.DirectedAcyclicGraph",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "iterator()",
    "name": "iterator",
    "containingClass": {
      "qualifiedName": "org.jgrapht.experimental.dag.DirectedAcyclicGraph",
      "name": "DirectedAcyclicGraph",
      "isArray": false
    },
    "targetClass": "org.jgrapht.experimental.dag.DirectedAcyclicGraph",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Iterator",
      "name": "Iterator",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "an iterator that will traverse the graph in topological order",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "addVertex(java.lang.Object v)",
    "name": "addVertex",
    "containingClass": {
      "qualifiedName": "org.jgrapht.experimental.dag.DirectedAcyclicGraph",
      "name": "DirectedAcyclicGraph",
      "isArray": false
    },
    "targetClass": "org.jgrapht.experimental.dag.DirectedAcyclicGraph",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "v"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          },
          "name": "v"
        },
        "comment": "vertex to be added to this graph.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if this graph did not already contain the specified vertex.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "java.lang.NullPointerException",
          "name": "NullPointerException",
          "isArray": false
        },
        "codeTags": [
          "null"
        ],
        "comment": "if the specified vertex is null.",
        "kind": "THROWS",
        "condition": "args[0]==null"
      }
    ]
  },
  {
    "signature": "addVertex(java.lang.Object v,boolean addToTop)",
    "name": "addVertex",
    "containingClass": {
      "qualifiedName": "org.jgrapht.experimental.dag.DirectedAcyclicGraph",
      "name": "DirectedAcyclicGraph",
      "isArray": false
    },
    "targetClass": "org.jgrapht.experimental.dag.DirectedAcyclicGraph",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "v"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "addToTop"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          },
          "name": "v"
        },
        "comment": "",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "addToTop"
        },
        "comment": "",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "whether new vertex was added",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "addDagEdge(java.lang.Object fromVertex,java.lang.Object toVertex)",
    "name": "addDagEdge",
    "containingClass": {
      "qualifiedName": "org.jgrapht.experimental.dag.DirectedAcyclicGraph",
      "name": "DirectedAcyclicGraph",
      "isArray": false
    },
    "targetClass": "org.jgrapht.experimental.dag.DirectedAcyclicGraph",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "fromVertex"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "toVertex"
      }
    ],
    "paramTags": [],
    "returnTag": {
      "comment": "null if the edge is already in the graph, else the created edge is returned",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "If either fromVertex or toVertex is not a member of the graph",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exception": {
          "qualifiedName": "org.jgrapht.experimental.dag.DirectedAcyclicGraph.CycleFoundException",
          "name": "CycleFoundException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if the edge would induce a cycle in the graph",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "addEdge(java.lang.Object sourceVertex,java.lang.Object targetVertex)",
    "name": "addEdge",
    "containingClass": {
      "qualifiedName": "org.jgrapht.experimental.dag.DirectedAcyclicGraph",
      "name": "DirectedAcyclicGraph",
      "isArray": false
    },
    "targetClass": "org.jgrapht.experimental.dag.DirectedAcyclicGraph",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "sourceVertex"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "targetVertex"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          },
          "name": "sourceVertex"
        },
        "comment": "source vertex of the edge.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          },
          "name": "targetVertex"
        },
        "comment": "target vertex of the edge.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "The newly created edge if added to the graph, otherwise null.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if source or target vertices are not found in the graph.",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exception": {
          "qualifiedName": "java.lang.NullPointerException",
          "name": "NullPointerException",
          "isArray": false
        },
        "codeTags": [
          "null"
        ],
        "comment": "if any of the specified vertices is null.",
        "kind": "THROWS",
        "condition": "(args[0]==null || args[1]==null)"
      }
    ]
  },
  {
    "signature": "addDagEdge(java.lang.Object fromVertex,java.lang.Object toVertex,java.lang.Object e)",
    "name": "addDagEdge",
    "containingClass": {
      "qualifiedName": "org.jgrapht.experimental.dag.DirectedAcyclicGraph",
      "name": "DirectedAcyclicGraph",
      "isArray": false
    },
    "targetClass": "org.jgrapht.experimental.dag.DirectedAcyclicGraph",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "fromVertex"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "toVertex"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "e"
      }
    ],
    "paramTags": [],
    "returnTag": {
      "comment": "true if the edge was added to the graph",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "org.jgrapht.experimental.dag.DirectedAcyclicGraph.CycleFoundException",
          "name": "CycleFoundException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if adding an edge (fromVertex, toVertex) to the graph would induce a cycle.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "updateDag(java.lang.Object fromVertex,java.lang.Object toVertex)",
    "name": "updateDag",
    "containingClass": {
      "qualifiedName": "org.jgrapht.experimental.dag.DirectedAcyclicGraph",
      "name": "DirectedAcyclicGraph",
      "isArray": false
    },
    "targetClass": "org.jgrapht.experimental.dag.DirectedAcyclicGraph",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "fromVertex"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "toVertex"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "addEdge(java.lang.Object sourceVertex,java.lang.Object targetVertex,java.lang.Object edge)",
    "name": "addEdge",
    "containingClass": {
      "qualifiedName": "org.jgrapht.experimental.dag.DirectedAcyclicGraph",
      "name": "DirectedAcyclicGraph",
      "isArray": false
    },
    "targetClass": "org.jgrapht.experimental.dag.DirectedAcyclicGraph",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "sourceVertex"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "targetVertex"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "edge"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          },
          "name": "sourceVertex"
        },
        "comment": "source vertex of the edge.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          },
          "name": "targetVertex"
        },
        "comment": "target vertex of the edge.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if this graph did not already contain the specified edge.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if source or target vertices are not found in the graph.",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exception": {
          "qualifiedName": "java.lang.ClassCastException",
          "name": "ClassCastException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if the specified edge is not assignment compatible with the class of edges produced by the edge factory of this graph.",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exception": {
          "qualifiedName": "java.lang.NullPointerException",
          "name": "NullPointerException",
          "isArray": false
        },
        "codeTags": [
          "null"
        ],
        "comment": "if any of the specified vertices is null.",
        "kind": "THROWS",
        "condition": "(args[0]==null || args[1]==null)"
      }
    ]
  },
  {
    "signature": "removeVertex(java.lang.Object v)",
    "name": "removeVertex",
    "containingClass": {
      "qualifiedName": "org.jgrapht.experimental.dag.DirectedAcyclicGraph",
      "name": "DirectedAcyclicGraph",
      "isArray": false
    },
    "targetClass": "org.jgrapht.experimental.dag.DirectedAcyclicGraph",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "v"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          },
          "name": "v"
        },
        "comment": "vertex to be removed from this graph, if present.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if the graph contained the specified vertex; false otherwise.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "removeAllVertices(java.util.Collection arg0)",
    "name": "removeAllVertices",
    "containingClass": {
      "qualifiedName": "org.jgrapht.experimental.dag.DirectedAcyclicGraph",
      "name": "DirectedAcyclicGraph",
      "isArray": false
    },
    "targetClass": "org.jgrapht.experimental.dag.DirectedAcyclicGraph",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "arg0"
      }
    ],
    "paramTags": [],
    "returnTag": {
      "comment": "true if this graph changed as a result of the call",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "java.lang.NullPointerException",
          "name": "NullPointerException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if the specified vertex collection is null.",
        "kind": "THROWS",
        "condition": "args[0]==null"
      }
    ]
  },
  {
    "signature": "dfsF(java.lang.Object vertex,java.util.Set df,org.jgrapht.experimental.dag.DirectedAcyclicGraph.Visited visited,org.jgrapht.experimental.dag.DirectedAcyclicGraph.Region affectedRegion)",
    "name": "dfsF",
    "containingClass": {
      "qualifiedName": "org.jgrapht.experimental.dag.DirectedAcyclicGraph",
      "name": "DirectedAcyclicGraph",
      "isArray": false
    },
    "targetClass": "org.jgrapht.experimental.dag.DirectedAcyclicGraph",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "vertex"
      },
      {
        "type": {
          "qualifiedName": "java.util.Set",
          "name": "Set",
          "isArray": false
        },
        "name": "df"
      },
      {
        "type": {
          "qualifiedName": "org.jgrapht.experimental.dag.DirectedAcyclicGraph.Visited",
          "name": "Visited",
          "isArray": false
        },
        "name": "visited"
      },
      {
        "type": {
          "qualifiedName": "org.jgrapht.experimental.dag.DirectedAcyclicGraph.Region",
          "name": "Region",
          "isArray": false
        },
        "name": "affectedRegion"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          },
          "name": "vertex"
        },
        "comment": "the vertex being visited",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.Set",
            "name": "Set",
            "isArray": false
          },
          "name": "df"
        },
        "comment": "the set we are populating with forward connected vertices in the Affected Region",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.jgrapht.experimental.dag.DirectedAcyclicGraph.Visited",
            "name": "Visited",
            "isArray": false
          },
          "name": "visited"
        },
        "comment": "a simple data structure that lets us know if we already visited a node with a given topo index",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "org.jgrapht.experimental.dag.DirectedAcyclicGraph.CycleFoundException",
          "name": "CycleFoundException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if a cycle is discovered",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "dfsB(java.lang.Object vertex,java.util.Set db,org.jgrapht.experimental.dag.DirectedAcyclicGraph.Visited visited,org.jgrapht.experimental.dag.DirectedAcyclicGraph.Region affectedRegion)",
    "name": "dfsB",
    "containingClass": {
      "qualifiedName": "org.jgrapht.experimental.dag.DirectedAcyclicGraph",
      "name": "DirectedAcyclicGraph",
      "isArray": false
    },
    "targetClass": "org.jgrapht.experimental.dag.DirectedAcyclicGraph",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "vertex"
      },
      {
        "type": {
          "qualifiedName": "java.util.Set",
          "name": "Set",
          "isArray": false
        },
        "name": "db"
      },
      {
        "type": {
          "qualifiedName": "org.jgrapht.experimental.dag.DirectedAcyclicGraph.Visited",
          "name": "Visited",
          "isArray": false
        },
        "name": "visited"
      },
      {
        "type": {
          "qualifiedName": "org.jgrapht.experimental.dag.DirectedAcyclicGraph.Region",
          "name": "Region",
          "isArray": false
        },
        "name": "affectedRegion"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          },
          "name": "vertex"
        },
        "comment": "the vertex being visited",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.Set",
            "name": "Set",
            "isArray": false
          },
          "name": "db"
        },
        "comment": "the set we are populating with back-connected vertices in the AR",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.jgrapht.experimental.dag.DirectedAcyclicGraph.Visited",
            "name": "Visited",
            "isArray": false
          },
          "name": "visited"
        },
        "comment": "",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "reorder(java.util.Set df,java.util.Set db,org.jgrapht.experimental.dag.DirectedAcyclicGraph.Visited visited)",
    "name": "reorder",
    "containingClass": {
      "qualifiedName": "org.jgrapht.experimental.dag.DirectedAcyclicGraph",
      "name": "DirectedAcyclicGraph",
      "isArray": false
    },
    "targetClass": "org.jgrapht.experimental.dag.DirectedAcyclicGraph",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Set",
          "name": "Set",
          "isArray": false
        },
        "name": "df"
      },
      {
        "type": {
          "qualifiedName": "java.util.Set",
          "name": "Set",
          "isArray": false
        },
        "name": "db"
      },
      {
        "type": {
          "qualifiedName": "org.jgrapht.experimental.dag.DirectedAcyclicGraph.Visited",
          "name": "Visited",
          "isArray": false
        },
        "name": "visited"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "builder(java.lang.Class edgeClass)",
    "name": "builder",
    "containingClass": {
      "qualifiedName": "org.jgrapht.graph.SimpleDirectedGraph",
      "name": "SimpleDirectedGraph",
      "isArray": false
    },
    "targetClass": "org.jgrapht.experimental.dag.DirectedAcyclicGraph",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.jgrapht.graph.builder.DirectedGraphBuilderBase",
      "name": "DirectedGraphBuilderBase",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Class",
          "name": "Class",
          "isArray": false
        },
        "name": "edgeClass"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "builder(org.jgrapht.EdgeFactory ef)",
    "name": "builder",
    "containingClass": {
      "qualifiedName": "org.jgrapht.graph.SimpleDirectedGraph",
      "name": "SimpleDirectedGraph",
      "isArray": false
    },
    "targetClass": "org.jgrapht.experimental.dag.DirectedAcyclicGraph",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.jgrapht.graph.builder.DirectedGraphBuilderBase",
      "name": "DirectedGraphBuilderBase",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.jgrapht.EdgeFactory",
          "name": "EdgeFactory",
          "isArray": false
        },
        "name": "ef"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getAllEdges(java.lang.Object sourceVertex,java.lang.Object targetVertex)",
    "name": "getAllEdges",
    "containingClass": {
      "qualifiedName": "org.jgrapht.graph.AbstractBaseGraph",
      "name": "AbstractBaseGraph",
      "isArray": false
    },
    "targetClass": "org.jgrapht.experimental.dag.DirectedAcyclicGraph",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Set",
      "name": "Set",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "sourceVertex"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "targetVertex"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          },
          "name": "sourceVertex"
        },
        "comment": "source vertex of the edge.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          },
          "name": "targetVertex"
        },
        "comment": "target vertex of the edge.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a set of all edges connecting source vertex to target vertex.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isAllowingLoops()",
    "name": "isAllowingLoops",
    "containingClass": {
      "qualifiedName": "org.jgrapht.graph.AbstractBaseGraph",
      "name": "AbstractBaseGraph",
      "isArray": false
    },
    "targetClass": "org.jgrapht.experimental.dag.DirectedAcyclicGraph",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "true if and only if graph loops are allowed.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isAllowingMultipleEdges()",
    "name": "isAllowingMultipleEdges",
    "containingClass": {
      "qualifiedName": "org.jgrapht.graph.AbstractBaseGraph",
      "name": "AbstractBaseGraph",
      "isArray": false
    },
    "targetClass": "org.jgrapht.experimental.dag.DirectedAcyclicGraph",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "true if and only if multiple edges are allowed.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getEdge(java.lang.Object sourceVertex,java.lang.Object targetVertex)",
    "name": "getEdge",
    "containingClass": {
      "qualifiedName": "org.jgrapht.graph.AbstractBaseGraph",
      "name": "AbstractBaseGraph",
      "isArray": false
    },
    "targetClass": "org.jgrapht.experimental.dag.DirectedAcyclicGraph",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "sourceVertex"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "targetVertex"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          },
          "name": "sourceVertex"
        },
        "comment": "source vertex of the edge.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          },
          "name": "targetVertex"
        },
        "comment": "target vertex of the edge.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "an edge connecting source vertex to target vertex.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getEdgeFactory()",
    "name": "getEdgeFactory",
    "containingClass": {
      "qualifiedName": "org.jgrapht.graph.AbstractBaseGraph",
      "name": "AbstractBaseGraph",
      "isArray": false
    },
    "targetClass": "org.jgrapht.experimental.dag.DirectedAcyclicGraph",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.jgrapht.EdgeFactory",
      "name": "EdgeFactory",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "the edge factory using which this graph creates new edges.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "setEdgeSetFactory(org.jgrapht.graph.EdgeSetFactory edgeSetFactory)",
    "name": "setEdgeSetFactory",
    "containingClass": {
      "qualifiedName": "org.jgrapht.graph.AbstractBaseGraph",
      "name": "AbstractBaseGraph",
      "isArray": false
    },
    "targetClass": "org.jgrapht.experimental.dag.DirectedAcyclicGraph",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.jgrapht.graph.EdgeSetFactory",
          "name": "EdgeSetFactory",
          "isArray": false
        },
        "name": "edgeSetFactory"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.jgrapht.graph.EdgeSetFactory",
            "name": "EdgeSetFactory",
            "isArray": false
          },
          "name": "edgeSetFactory"
        },
        "comment": "factory to use for subsequently created edge sets (this call has no effect on existing edge sets)",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "createIntrusiveEdge(java.lang.Object e,java.lang.Object sourceVertex,java.lang.Object targetVertex)",
    "name": "createIntrusiveEdge",
    "containingClass": {
      "qualifiedName": "org.jgrapht.graph.AbstractBaseGraph",
      "name": "AbstractBaseGraph",
      "isArray": false
    },
    "targetClass": "org.jgrapht.experimental.dag.DirectedAcyclicGraph",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.jgrapht.graph.IntrusiveEdge",
      "name": "IntrusiveEdge",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "e"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "sourceVertex"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "targetVertex"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getEdgeSource(java.lang.Object e)",
    "name": "getEdgeSource",
    "containingClass": {
      "qualifiedName": "org.jgrapht.graph.AbstractBaseGraph",
      "name": "AbstractBaseGraph",
      "isArray": false
    },
    "targetClass": "org.jgrapht.experimental.dag.DirectedAcyclicGraph",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "V",
      "name": "V",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "e"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          },
          "name": "e"
        },
        "comment": "edge of interest",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "source vertex",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getEdgeTarget(java.lang.Object e)",
    "name": "getEdgeTarget",
    "containingClass": {
      "qualifiedName": "org.jgrapht.graph.AbstractBaseGraph",
      "name": "AbstractBaseGraph",
      "isArray": false
    },
    "targetClass": "org.jgrapht.experimental.dag.DirectedAcyclicGraph",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "V",
      "name": "V",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "e"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          },
          "name": "e"
        },
        "comment": "edge of interest",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "target vertex",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getIntrusiveEdge(java.lang.Object e)",
    "name": "getIntrusiveEdge",
    "containingClass": {
      "qualifiedName": "org.jgrapht.graph.AbstractBaseGraph",
      "name": "AbstractBaseGraph",
      "isArray": false
    },
    "targetClass": "org.jgrapht.experimental.dag.DirectedAcyclicGraph",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.jgrapht.graph.IntrusiveEdge",
      "name": "IntrusiveEdge",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "e"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "clone()",
    "name": "clone",
    "containingClass": {
      "qualifiedName": "org.jgrapht.graph.AbstractBaseGraph",
      "name": "AbstractBaseGraph",
      "isArray": false
    },
    "targetClass": "org.jgrapht.experimental.dag.DirectedAcyclicGraph",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Object",
      "name": "Object",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "a shallow copy of this set.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "java.lang.RuntimeException",
          "name": "RuntimeException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "containsEdge(java.lang.Object e)",
    "name": "containsEdge",
    "containingClass": {
      "qualifiedName": "org.jgrapht.graph.AbstractBaseGraph",
      "name": "AbstractBaseGraph",
      "isArray": false
    },
    "targetClass": "org.jgrapht.experimental.dag.DirectedAcyclicGraph",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "e"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          },
          "name": "e"
        },
        "comment": "edge whose presence in this graph is to be tested.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if this graph contains the specified edge.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "containsVertex(java.lang.Object v)",
    "name": "containsVertex",
    "containingClass": {
      "qualifiedName": "org.jgrapht.graph.AbstractBaseGraph",
      "name": "AbstractBaseGraph",
      "isArray": false
    },
    "targetClass": "org.jgrapht.experimental.dag.DirectedAcyclicGraph",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "v"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          },
          "name": "v"
        },
        "comment": "vertex whose presence in this graph is to be tested.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if this graph contains the specified vertex.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "degreeOf(java.lang.Object vertex)",
    "name": "degreeOf",
    "containingClass": {
      "qualifiedName": "org.jgrapht.graph.AbstractBaseGraph",
      "name": "AbstractBaseGraph",
      "isArray": false
    },
    "targetClass": "org.jgrapht.experimental.dag.DirectedAcyclicGraph",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "vertex"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "edgeSet()",
    "name": "edgeSet",
    "containingClass": {
      "qualifiedName": "org.jgrapht.graph.AbstractBaseGraph",
      "name": "AbstractBaseGraph",
      "isArray": false
    },
    "targetClass": "org.jgrapht.experimental.dag.DirectedAcyclicGraph",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Set",
      "name": "Set",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "a set of the edges contained in this graph.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "edgesOf(java.lang.Object vertex)",
    "name": "edgesOf",
    "containingClass": {
      "qualifiedName": "org.jgrapht.graph.AbstractBaseGraph",
      "name": "AbstractBaseGraph",
      "isArray": false
    },
    "targetClass": "org.jgrapht.experimental.dag.DirectedAcyclicGraph",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Set",
      "name": "Set",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "vertex"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          },
          "name": "vertex"
        },
        "comment": "the vertex for which a set of touching edges is to be returned.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a set of all edges touching the specified vertex.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if vertex is not found in the graph.",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exception": {
          "qualifiedName": "java.lang.NullPointerException",
          "name": "NullPointerException",
          "isArray": false
        },
        "codeTags": [
          "null"
        ],
        "comment": "if vertex is null.",
        "kind": "THROWS",
        "condition": "args[0]==null"
      }
    ]
  },
  {
    "signature": "inDegreeOf(java.lang.Object vertex)",
    "name": "inDegreeOf",
    "containingClass": {
      "qualifiedName": "org.jgrapht.graph.AbstractBaseGraph",
      "name": "AbstractBaseGraph",
      "isArray": false
    },
    "targetClass": "org.jgrapht.experimental.dag.DirectedAcyclicGraph",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "vertex"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "incomingEdgesOf(java.lang.Object vertex)",
    "name": "incomingEdgesOf",
    "containingClass": {
      "qualifiedName": "org.jgrapht.graph.AbstractBaseGraph",
      "name": "AbstractBaseGraph",
      "isArray": false
    },
    "targetClass": "org.jgrapht.experimental.dag.DirectedAcyclicGraph",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Set",
      "name": "Set",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "vertex"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "outDegreeOf(java.lang.Object vertex)",
    "name": "outDegreeOf",
    "containingClass": {
      "qualifiedName": "org.jgrapht.graph.AbstractBaseGraph",
      "name": "AbstractBaseGraph",
      "isArray": false
    },
    "targetClass": "org.jgrapht.experimental.dag.DirectedAcyclicGraph",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "vertex"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "outgoingEdgesOf(java.lang.Object vertex)",
    "name": "outgoingEdgesOf",
    "containingClass": {
      "qualifiedName": "org.jgrapht.graph.AbstractBaseGraph",
      "name": "AbstractBaseGraph",
      "isArray": false
    },
    "targetClass": "org.jgrapht.experimental.dag.DirectedAcyclicGraph",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Set",
      "name": "Set",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "vertex"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "removeEdge(java.lang.Object sourceVertex,java.lang.Object targetVertex)",
    "name": "removeEdge",
    "containingClass": {
      "qualifiedName": "org.jgrapht.graph.AbstractBaseGraph",
      "name": "AbstractBaseGraph",
      "isArray": false
    },
    "targetClass": "org.jgrapht.experimental.dag.DirectedAcyclicGraph",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "sourceVertex"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "targetVertex"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          },
          "name": "sourceVertex"
        },
        "comment": "source vertex of the edge.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          },
          "name": "targetVertex"
        },
        "comment": "target vertex of the edge.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "The removed edge, or null if no edge removed.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "removeEdge(java.lang.Object e)",
    "name": "removeEdge",
    "containingClass": {
      "qualifiedName": "org.jgrapht.graph.AbstractBaseGraph",
      "name": "AbstractBaseGraph",
      "isArray": false
    },
    "targetClass": "org.jgrapht.experimental.dag.DirectedAcyclicGraph",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "e"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          },
          "name": "e"
        },
        "comment": "edge to be removed from this graph, if present.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if and only if the graph contained the specified edge.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "vertexSet()",
    "name": "vertexSet",
    "containingClass": {
      "qualifiedName": "org.jgrapht.graph.AbstractBaseGraph",
      "name": "AbstractBaseGraph",
      "isArray": false
    },
    "targetClass": "org.jgrapht.experimental.dag.DirectedAcyclicGraph",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Set",
      "name": "Set",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "a set view of the vertices contained in this graph.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getEdgeWeight(java.lang.Object e)",
    "name": "getEdgeWeight",
    "containingClass": {
      "qualifiedName": "org.jgrapht.graph.AbstractBaseGraph",
      "name": "AbstractBaseGraph",
      "isArray": false
    },
    "targetClass": "org.jgrapht.experimental.dag.DirectedAcyclicGraph",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "e"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          },
          "name": "e"
        },
        "comment": "edge of interest",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "edge weight",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "setEdgeWeight(java.lang.Object e,double weight)",
    "name": "setEdgeWeight",
    "containingClass": {
      "qualifiedName": "org.jgrapht.graph.AbstractBaseGraph",
      "name": "AbstractBaseGraph",
      "isArray": false
    },
    "targetClass": "org.jgrapht.experimental.dag.DirectedAcyclicGraph",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "e"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "weight"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "createSpecifics()",
    "name": "createSpecifics",
    "containingClass": {
      "qualifiedName": "org.jgrapht.graph.AbstractBaseGraph",
      "name": "AbstractBaseGraph",
      "isArray": false
    },
    "targetClass": "org.jgrapht.experimental.dag.DirectedAcyclicGraph",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.jgrapht.graph.AbstractBaseGraph.Specifics",
      "name": "Specifics",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "createUndirectedSpecifics()",
    "name": "createUndirectedSpecifics",
    "containingClass": {
      "qualifiedName": "org.jgrapht.graph.AbstractBaseGraph",
      "name": "AbstractBaseGraph",
      "isArray": false
    },
    "targetClass": "org.jgrapht.experimental.dag.DirectedAcyclicGraph",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.jgrapht.graph.AbstractBaseGraph.UndirectedSpecifics",
      "name": "UndirectedSpecifics",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "createDirectedSpecifics()",
    "name": "createDirectedSpecifics",
    "containingClass": {
      "qualifiedName": "org.jgrapht.graph.AbstractBaseGraph",
      "name": "AbstractBaseGraph",
      "isArray": false
    },
    "targetClass": "org.jgrapht.experimental.dag.DirectedAcyclicGraph",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.jgrapht.graph.AbstractBaseGraph.DirectedSpecifics",
      "name": "DirectedSpecifics",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "containsEdge(java.lang.Object sourceVertex,java.lang.Object targetVertex)",
    "name": "containsEdge",
    "containingClass": {
      "qualifiedName": "org.jgrapht.graph.AbstractGraph",
      "name": "AbstractGraph",
      "isArray": false
    },
    "targetClass": "org.jgrapht.experimental.dag.DirectedAcyclicGraph",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "sourceVertex"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "targetVertex"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          },
          "name": "sourceVertex"
        },
        "comment": "source vertex of the edge.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          },
          "name": "targetVertex"
        },
        "comment": "target vertex of the edge.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if this graph contains the specified edge.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "removeAllEdges(java.util.Collection edges)",
    "name": "removeAllEdges",
    "containingClass": {
      "qualifiedName": "org.jgrapht.graph.AbstractGraph",
      "name": "AbstractGraph",
      "isArray": false
    },
    "targetClass": "org.jgrapht.experimental.dag.DirectedAcyclicGraph",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "edges"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.Collection",
            "name": "Collection",
            "isArray": false
          },
          "name": "edges"
        },
        "comment": "edges to be removed from this graph.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if this graph changed as a result of the call",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "java.lang.NullPointerException",
          "name": "NullPointerException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if the specified edge collection is null.",
        "kind": "THROWS",
        "condition": "args[0]==null"
      }
    ]
  },
  {
    "signature": "removeAllEdges(java.lang.Object sourceVertex,java.lang.Object targetVertex)",
    "name": "removeAllEdges",
    "containingClass": {
      "qualifiedName": "org.jgrapht.graph.AbstractGraph",
      "name": "AbstractGraph",
      "isArray": false
    },
    "targetClass": "org.jgrapht.experimental.dag.DirectedAcyclicGraph",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Set",
      "name": "Set",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "sourceVertex"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "targetVertex"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          },
          "name": "sourceVertex"
        },
        "comment": "source vertex of the edge.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          },
          "name": "targetVertex"
        },
        "comment": "target vertex of the edge.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the removed edges, or null if either vertex is not part of graph",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "toString()",
    "name": "toString",
    "containingClass": {
      "qualifiedName": "org.jgrapht.graph.AbstractGraph",
      "name": "AbstractGraph",
      "isArray": false
    },
    "targetClass": "org.jgrapht.experimental.dag.DirectedAcyclicGraph",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "String",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "a string representation of this graph.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "assertVertexExist(java.lang.Object v)",
    "name": "assertVertexExist",
    "containingClass": {
      "qualifiedName": "org.jgrapht.graph.AbstractGraph",
      "name": "AbstractGraph",
      "isArray": false
    },
    "targetClass": "org.jgrapht.experimental.dag.DirectedAcyclicGraph",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "v"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          },
          "name": "v"
        },
        "comment": "vertex",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if this assertion holds.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "java.lang.NullPointerException",
          "name": "NullPointerException",
          "isArray": false
        },
        "codeTags": [
          "null"
        ],
        "comment": "if specified vertex is null.",
        "kind": "THROWS",
        "condition": "args[0]==null"
      },
      {
        "exception": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if specified vertex does not exist in this graph.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "removeAllEdges(java.lang.Object[] edges)",
    "name": "removeAllEdges",
    "containingClass": {
      "qualifiedName": "org.jgrapht.graph.AbstractGraph",
      "name": "AbstractGraph",
      "isArray": false
    },
    "targetClass": "org.jgrapht.experimental.dag.DirectedAcyclicGraph",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object[]",
          "name": "Object[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          }
        },
        "name": "edges"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object[]",
            "name": "Object[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "java.lang.Object",
              "name": "Object",
              "isArray": false
            }
          },
          "name": "edges"
        },
        "comment": "edges to be removed from this graph.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if this graph changed as a result of the call.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "toStringFromSets(java.util.Collection vertexSet,java.util.Collection edgeSet,boolean directed)",
    "name": "toStringFromSets",
    "containingClass": {
      "qualifiedName": "org.jgrapht.graph.AbstractGraph",
      "name": "AbstractGraph",
      "isArray": false
    },
    "targetClass": "org.jgrapht.experimental.dag.DirectedAcyclicGraph",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "vertexSet"
      },
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "edgeSet"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "directed"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.Collection",
            "name": "Collection",
            "isArray": false
          },
          "name": "vertexSet"
        },
        "comment": "the vertex set V to be printed",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.Collection",
            "name": "Collection",
            "isArray": false
          },
          "name": "edgeSet"
        },
        "comment": "the edge set E to be printed",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "directed"
        },
        "comment": "true to use parens for each edge (representing directed); false to use curly braces (representing undirected)",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a string representation of (V,E)",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "hashCode()",
    "name": "hashCode",
    "containingClass": {
      "qualifiedName": "org.jgrapht.graph.AbstractGraph",
      "name": "AbstractGraph",
      "isArray": false
    },
    "targetClass": "org.jgrapht.experimental.dag.DirectedAcyclicGraph",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "the hash code value this graph",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "equals(java.lang.Object obj)",
    "name": "equals",
    "containingClass": {
      "qualifiedName": "org.jgrapht.graph.AbstractGraph",
      "name": "AbstractGraph",
      "isArray": false
    },
    "targetClass": "org.jgrapht.experimental.dag.DirectedAcyclicGraph",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "obj"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          },
          "name": "obj"
        },
        "comment": "object to be compared for equality with this graph",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if the specified object is equal to this graph",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  }
]
