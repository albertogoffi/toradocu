[
  {
    "signature": "MathMDE()",
    "name": "MathMDE",
    "containingClass": {
      "qualifiedName": "plume.MathMDE",
      "name": "MathMDE",
      "isArray": false
    },
    "targetClass": "plume.MathMDE",
    "isVarArgs": false,
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "negate(int a)",
    "name": "negate",
    "containingClass": {
      "qualifiedName": "plume.MathMDE",
      "name": "MathMDE",
      "isArray": false
    },
    "targetClass": "plume.MathMDE",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "a"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "a"
        },
        "comment": "value to negate",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "negative of a",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "negate(long a)",
    "name": "negate",
    "containingClass": {
      "qualifiedName": "plume.MathMDE",
      "name": "MathMDE",
      "isArray": false
    },
    "targetClass": "plume.MathMDE",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "a"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "a"
        },
        "comment": "value to negate",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "negative of a",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "negate(double a)",
    "name": "negate",
    "containingClass": {
      "qualifiedName": "plume.MathMDE",
      "name": "MathMDE",
      "isArray": false
    },
    "targetClass": "plume.MathMDE",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "a"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "a"
        },
        "comment": "value to negate",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "negative of a",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "bitwiseComplement(int a)",
    "name": "bitwiseComplement",
    "containingClass": {
      "qualifiedName": "plume.MathMDE",
      "name": "MathMDE",
      "isArray": false
    },
    "targetClass": "plume.MathMDE",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "a"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "a"
        },
        "comment": "value to bitwise-complement",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "~a, the bitwise complement of a",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "bitwiseComplement(long a)",
    "name": "bitwiseComplement",
    "containingClass": {
      "qualifiedName": "plume.MathMDE",
      "name": "MathMDE",
      "isArray": false
    },
    "targetClass": "plume.MathMDE",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "a"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "a"
        },
        "comment": "value to bitwise-complement",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "~a, the bitwise complement of a",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "mul(int x,int y)",
    "name": "mul",
    "containingClass": {
      "qualifiedName": "plume.MathMDE",
      "name": "MathMDE",
      "isArray": false
    },
    "targetClass": "plume.MathMDE",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "x"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "y"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "x"
        },
        "comment": "first multiplicand",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "y"
        },
        "comment": "second multiplicand",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "x * y",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "mul(long x,long y)",
    "name": "mul",
    "containingClass": {
      "qualifiedName": "plume.MathMDE",
      "name": "MathMDE",
      "isArray": false
    },
    "targetClass": "plume.MathMDE",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "x"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "y"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "x"
        },
        "comment": "first multiplicand",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "y"
        },
        "comment": "second multiplicand",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "x * y",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "mul(double x,double y)",
    "name": "mul",
    "containingClass": {
      "qualifiedName": "plume.MathMDE",
      "name": "MathMDE",
      "isArray": false
    },
    "targetClass": "plume.MathMDE",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "x"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "y"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "x"
        },
        "comment": "first multiplicand",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "y"
        },
        "comment": "second multiplicand",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "x * y",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "div(int x,int y)",
    "name": "div",
    "containingClass": {
      "qualifiedName": "plume.MathMDE",
      "name": "MathMDE",
      "isArray": false
    },
    "targetClass": "plume.MathMDE",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "x"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "y"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "x"
        },
        "comment": "dividend",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "y"
        },
        "comment": "divisor",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "x / y",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "div(long x,long y)",
    "name": "div",
    "containingClass": {
      "qualifiedName": "plume.MathMDE",
      "name": "MathMDE",
      "isArray": false
    },
    "targetClass": "plume.MathMDE",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "x"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "y"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "x"
        },
        "comment": "dividend",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "y"
        },
        "comment": "divisor",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "x / y",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "div(double x,double y)",
    "name": "div",
    "containingClass": {
      "qualifiedName": "plume.MathMDE",
      "name": "MathMDE",
      "isArray": false
    },
    "targetClass": "plume.MathMDE",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "x"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "y"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "x"
        },
        "comment": "dividend",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "y"
        },
        "comment": "divisor",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "x / y",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "mod(int x,int y)",
    "name": "mod",
    "containingClass": {
      "qualifiedName": "plume.MathMDE",
      "name": "MathMDE",
      "isArray": false
    },
    "targetClass": "plume.MathMDE",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "x"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "y"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "x"
        },
        "comment": "valued to be modded",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "y"
        },
        "comment": "modulus",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "x % y",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "mod(long x,long y)",
    "name": "mod",
    "containingClass": {
      "qualifiedName": "plume.MathMDE",
      "name": "MathMDE",
      "isArray": false
    },
    "targetClass": "plume.MathMDE",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "x"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "y"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "x"
        },
        "comment": "valued to be modded",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "y"
        },
        "comment": "modulus",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "x % y",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "lshift(int x,int y)",
    "name": "lshift",
    "containingClass": {
      "qualifiedName": "plume.MathMDE",
      "name": "MathMDE",
      "isArray": false
    },
    "targetClass": "plume.MathMDE",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "x"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "y"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "x"
        },
        "comment": "valued to be left-shifted",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "y"
        },
        "comment": "magnitude of the left-shift",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "x << y",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "lshift(long x,long y)",
    "name": "lshift",
    "containingClass": {
      "qualifiedName": "plume.MathMDE",
      "name": "MathMDE",
      "isArray": false
    },
    "targetClass": "plume.MathMDE",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "x"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "y"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "x"
        },
        "comment": "valued to be left-shifted",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "y"
        },
        "comment": "magnitude of the left-shift",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "x << y",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "rshiftSigned(int x,int y)",
    "name": "rshiftSigned",
    "containingClass": {
      "qualifiedName": "plume.MathMDE",
      "name": "MathMDE",
      "isArray": false
    },
    "targetClass": "plume.MathMDE",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "x"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "y"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "x"
        },
        "comment": "valued to be right-shifted",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "y"
        },
        "comment": "magnitude of the right-shift",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "x >> y",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "rshiftSigned(long x,long y)",
    "name": "rshiftSigned",
    "containingClass": {
      "qualifiedName": "plume.MathMDE",
      "name": "MathMDE",
      "isArray": false
    },
    "targetClass": "plume.MathMDE",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "x"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "y"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "x"
        },
        "comment": "valued to be right-shifted",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "y"
        },
        "comment": "magnitude of the right-shift",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "x >> y",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "rshiftUnsigned(int x,int y)",
    "name": "rshiftUnsigned",
    "containingClass": {
      "qualifiedName": "plume.MathMDE",
      "name": "MathMDE",
      "isArray": false
    },
    "targetClass": "plume.MathMDE",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "x"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "y"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "x"
        },
        "comment": "valued to be right-shifted",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "y"
        },
        "comment": "magnitude of the right-shift",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "x >>> y",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "rshiftUnsigned(long x,long y)",
    "name": "rshiftUnsigned",
    "containingClass": {
      "qualifiedName": "plume.MathMDE",
      "name": "MathMDE",
      "isArray": false
    },
    "targetClass": "plume.MathMDE",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "x"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "y"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "x"
        },
        "comment": "valued to be right-shifted",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "y"
        },
        "comment": "magnitude of the right-shift",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "x >>> y",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "bitwiseAnd(int x,int y)",
    "name": "bitwiseAnd",
    "containingClass": {
      "qualifiedName": "plume.MathMDE",
      "name": "MathMDE",
      "isArray": false
    },
    "targetClass": "plume.MathMDE",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "x"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "y"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "x"
        },
        "comment": "first operand",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "y"
        },
        "comment": "second operand",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "x & y",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "bitwiseAnd(long x,long y)",
    "name": "bitwiseAnd",
    "containingClass": {
      "qualifiedName": "plume.MathMDE",
      "name": "MathMDE",
      "isArray": false
    },
    "targetClass": "plume.MathMDE",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "x"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "y"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "x"
        },
        "comment": "first operand",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "y"
        },
        "comment": "second operand",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "x & y",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "logicalAnd(int x,int y)",
    "name": "logicalAnd",
    "containingClass": {
      "qualifiedName": "plume.MathMDE",
      "name": "MathMDE",
      "isArray": false
    },
    "targetClass": "plume.MathMDE",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "x"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "y"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "x"
        },
        "comment": "first operand",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "y"
        },
        "comment": "second operand",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the logical and of x and y; the result is always 0 or 1",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "logicalAnd(long x,long y)",
    "name": "logicalAnd",
    "containingClass": {
      "qualifiedName": "plume.MathMDE",
      "name": "MathMDE",
      "isArray": false
    },
    "targetClass": "plume.MathMDE",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "x"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "y"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "x"
        },
        "comment": "first operand",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "y"
        },
        "comment": "second operand",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the logical and of x and y; the result is always 0 or 1",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "bitwiseXor(int x,int y)",
    "name": "bitwiseXor",
    "containingClass": {
      "qualifiedName": "plume.MathMDE",
      "name": "MathMDE",
      "isArray": false
    },
    "targetClass": "plume.MathMDE",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "x"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "y"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "x"
        },
        "comment": "first operand",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "y"
        },
        "comment": "second operand",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "x ^ y",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "bitwiseXor(long x,long y)",
    "name": "bitwiseXor",
    "containingClass": {
      "qualifiedName": "plume.MathMDE",
      "name": "MathMDE",
      "isArray": false
    },
    "targetClass": "plume.MathMDE",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "x"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "y"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "x"
        },
        "comment": "first operand",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "y"
        },
        "comment": "second operand",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "x ^ y",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "logicalXor(int x,int y)",
    "name": "logicalXor",
    "containingClass": {
      "qualifiedName": "plume.MathMDE",
      "name": "MathMDE",
      "isArray": false
    },
    "targetClass": "plume.MathMDE",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "x"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "y"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "x"
        },
        "comment": "first operand",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "y"
        },
        "comment": "second operand",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the logical xor of x and y; the result is always 0 or 1",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "logicalXor(long x,long y)",
    "name": "logicalXor",
    "containingClass": {
      "qualifiedName": "plume.MathMDE",
      "name": "MathMDE",
      "isArray": false
    },
    "targetClass": "plume.MathMDE",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "x"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "y"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "x"
        },
        "comment": "first operand",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "y"
        },
        "comment": "second operand",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the logical xor of x and y; the result is always 0 or 1",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "bitwiseOr(int x,int y)",
    "name": "bitwiseOr",
    "containingClass": {
      "qualifiedName": "plume.MathMDE",
      "name": "MathMDE",
      "isArray": false
    },
    "targetClass": "plume.MathMDE",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "x"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "y"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "x"
        },
        "comment": "first operand",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "y"
        },
        "comment": "second operand",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "x | y",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "bitwiseOr(long x,long y)",
    "name": "bitwiseOr",
    "containingClass": {
      "qualifiedName": "plume.MathMDE",
      "name": "MathMDE",
      "isArray": false
    },
    "targetClass": "plume.MathMDE",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "x"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "y"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "x"
        },
        "comment": "first operand",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "y"
        },
        "comment": "second operand",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "x | y",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "logicalOr(int x,int y)",
    "name": "logicalOr",
    "containingClass": {
      "qualifiedName": "plume.MathMDE",
      "name": "MathMDE",
      "isArray": false
    },
    "targetClass": "plume.MathMDE",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "x"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "y"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "x"
        },
        "comment": "first operand",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "y"
        },
        "comment": "second operand",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the logical or of x and y; the result is always 0 or 1",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "logicalOr(long x,long y)",
    "name": "logicalOr",
    "containingClass": {
      "qualifiedName": "plume.MathMDE",
      "name": "MathMDE",
      "isArray": false
    },
    "targetClass": "plume.MathMDE",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "x"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "y"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "x"
        },
        "comment": "first operand",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "y"
        },
        "comment": "second operand",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the logical or of x and y; the result is always 0 or 1",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "sign(int a)",
    "name": "sign",
    "containingClass": {
      "qualifiedName": "plume.MathMDE",
      "name": "MathMDE",
      "isArray": false
    },
    "targetClass": "plume.MathMDE",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "a"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "a"
        },
        "comment": "value to have its sign taken",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the sign of a: -1, 0, or 1",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "pow(int base,int expt)",
    "name": "pow",
    "containingClass": {
      "qualifiedName": "plume.MathMDE",
      "name": "MathMDE",
      "isArray": false
    },
    "targetClass": "plume.MathMDE",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "base"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "expt"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "base"
        },
        "comment": "the base",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "expt"
        },
        "comment": "the exponent",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "base to the expt power",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "pow(long base,long expt)",
    "name": "pow",
    "containingClass": {
      "qualifiedName": "plume.MathMDE",
      "name": "MathMDE",
      "isArray": false
    },
    "targetClass": "plume.MathMDE",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "base"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "expt"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "base"
        },
        "comment": "the base",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "expt"
        },
        "comment": "the exponent",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "base to the expt power",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "pow_fast(int base,int expt)",
    "name": "pow_fast",
    "containingClass": {
      "qualifiedName": "plume.MathMDE",
      "name": "MathMDE",
      "isArray": false
    },
    "targetClass": "plume.MathMDE",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "base"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "expt"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "pow_fast(long base,long expt)",
    "name": "pow_fast",
    "containingClass": {
      "qualifiedName": "plume.MathMDE",
      "name": "MathMDE",
      "isArray": false
    },
    "targetClass": "plume.MathMDE",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "base"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "expt"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "pow_slow(int base,int expt)",
    "name": "pow_slow",
    "containingClass": {
      "qualifiedName": "plume.MathMDE",
      "name": "MathMDE",
      "isArray": false
    },
    "targetClass": "plume.MathMDE",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "base"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "expt"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "gcd(int a,int b)",
    "name": "gcd",
    "containingClass": {
      "qualifiedName": "plume.MathMDE",
      "name": "MathMDE",
      "isArray": false
    },
    "targetClass": "plume.MathMDE",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "a"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "b"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "a"
        },
        "comment": "first operand",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "b"
        },
        "comment": "second operand",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "greatest common divisor of a and b",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "gcd(int[] a)",
    "name": "gcd",
    "containingClass": {
      "qualifiedName": "plume.MathMDE",
      "name": "MathMDE",
      "isArray": false
    },
    "targetClass": "plume.MathMDE",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int[]",
          "name": "int[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          }
        },
        "name": "a"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int[]",
            "name": "int[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "int",
              "name": "int",
              "isArray": false
            }
          },
          "name": "a"
        },
        "comment": "array of operands",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "greatest common divisor of the elements of a",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "gcd_differences(int[] a)",
    "name": "gcd_differences",
    "containingClass": {
      "qualifiedName": "plume.MathMDE",
      "name": "MathMDE",
      "isArray": false
    },
    "targetClass": "plume.MathMDE",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int[]",
          "name": "int[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          }
        },
        "name": "a"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int[]",
            "name": "int[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "int",
              "name": "int",
              "isArray": false
            }
          },
          "name": "a"
        },
        "comment": "array of operands",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "greatest common divisor of the differences between the elements of a",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "gcd(long a,long b)",
    "name": "gcd",
    "containingClass": {
      "qualifiedName": "plume.MathMDE",
      "name": "MathMDE",
      "isArray": false
    },
    "targetClass": "plume.MathMDE",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "a"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "b"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "a"
        },
        "comment": "first operand",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "b"
        },
        "comment": "second operand",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "greatest common divisor of a and b",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "gcd(long[] a)",
    "name": "gcd",
    "containingClass": {
      "qualifiedName": "plume.MathMDE",
      "name": "MathMDE",
      "isArray": false
    },
    "targetClass": "plume.MathMDE",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long[]",
          "name": "long[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          }
        },
        "name": "a"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "long[]",
            "name": "long[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "long",
              "name": "long",
              "isArray": false
            }
          },
          "name": "a"
        },
        "comment": "array of operands",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "greatest common divisor of the elements of a",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "gcd_differences(long[] a)",
    "name": "gcd_differences",
    "containingClass": {
      "qualifiedName": "plume.MathMDE",
      "name": "MathMDE",
      "isArray": false
    },
    "targetClass": "plume.MathMDE",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long[]",
          "name": "long[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          }
        },
        "name": "a"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "long[]",
            "name": "long[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "long",
              "name": "long",
              "isArray": false
            }
          },
          "name": "a"
        },
        "comment": "array of operands",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "greatest common divisor of the differences between the elements of a",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "gcd(double a,double b)",
    "name": "gcd",
    "containingClass": {
      "qualifiedName": "plume.MathMDE",
      "name": "MathMDE",
      "isArray": false
    },
    "targetClass": "plume.MathMDE",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "a"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "b"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "a"
        },
        "comment": "first operand",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "b"
        },
        "comment": "second operand",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "greatest common divisor of a and b",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "gcd(double[] a)",
    "name": "gcd",
    "containingClass": {
      "qualifiedName": "plume.MathMDE",
      "name": "MathMDE",
      "isArray": false
    },
    "targetClass": "plume.MathMDE",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "a"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "a"
        },
        "comment": "array of operands",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "greatest common divisor of the elements of a",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "gcd_differences(double[] a)",
    "name": "gcd_differences",
    "containingClass": {
      "qualifiedName": "plume.MathMDE",
      "name": "MathMDE",
      "isArray": false
    },
    "targetClass": "plume.MathMDE",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "a"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "a"
        },
        "comment": "array of operands",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "greatest common divisor of the differences between the elements of a",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "mod_positive(int x,int y)",
    "name": "mod_positive",
    "containingClass": {
      "qualifiedName": "plume.MathMDE",
      "name": "MathMDE",
      "isArray": false
    },
    "targetClass": "plume.MathMDE",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "x"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "y"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "x"
        },
        "comment": "value to be modded",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "y"
        },
        "comment": "modulus",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "x % y, where the result is constrained to be positive",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "modulus(int[] nums)",
    "name": "modulus",
    "containingClass": {
      "qualifiedName": "plume.MathMDE",
      "name": "MathMDE",
      "isArray": false
    },
    "targetClass": "plume.MathMDE",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int[]",
      "name": "int[]",
      "isArray": true,
      "componentType": {
        "qualifiedName": "int",
        "name": "int",
        "isArray": false
      }
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int[]",
          "name": "int[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          }
        },
        "name": "nums"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int[]",
            "name": "int[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "int",
              "name": "int",
              "isArray": false
            }
          },
          "name": "nums"
        },
        "comment": "array of operands",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "an array of two integers (r,m) such that each number in NUMS is equal to r (mod m), or null if no such exists or the iterator contains fewer than 3 elements",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "modulus_int(java.util.Iterator itor)",
    "name": "modulus_int",
    "containingClass": {
      "qualifiedName": "plume.MathMDE",
      "name": "MathMDE",
      "isArray": false
    },
    "targetClass": "plume.MathMDE",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int[]",
      "name": "int[]",
      "isArray": true,
      "componentType": {
        "qualifiedName": "int",
        "name": "int",
        "isArray": false
      }
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Iterator",
          "name": "Iterator",
          "isArray": false
        },
        "name": "itor"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.Iterator",
            "name": "Iterator",
            "isArray": false
          },
          "name": "itor"
        },
        "comment": "iterator of operands",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "an array of two integers (r,m) such that each number in itor is equal to r (mod m), or null if no such exists or the iterator contains fewer than 3 elements",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "modulus_strict(int[] nums,boolean nonstrict_ends)",
    "name": "modulus_strict",
    "containingClass": {
      "qualifiedName": "plume.MathMDE",
      "name": "MathMDE",
      "isArray": false
    },
    "targetClass": "plume.MathMDE",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int[]",
      "name": "int[]",
      "isArray": true,
      "componentType": {
        "qualifiedName": "int",
        "name": "int",
        "isArray": false
      }
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int[]",
          "name": "int[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          }
        },
        "name": "nums"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "nonstrict_ends"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int[]",
            "name": "int[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "int",
              "name": "int",
              "isArray": false
            }
          },
          "name": "nums"
        },
        "comment": "array of operands",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "nonstrict_ends"
        },
        "comment": "whether endpoints are NOT subject to the strict density requirement",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "an array of two integers (r,m) such that each number in NUMS is equal to r (mod m), or null if no such exists or the array contains fewer than 3 elements",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "modulus_strict_int(java.util.Iterator itor,boolean nonstrict_ends)",
    "name": "modulus_strict_int",
    "containingClass": {
      "qualifiedName": "plume.MathMDE",
      "name": "MathMDE",
      "isArray": false
    },
    "targetClass": "plume.MathMDE",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int[]",
      "name": "int[]",
      "isArray": true,
      "componentType": {
        "qualifiedName": "int",
        "name": "int",
        "isArray": false
      }
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Iterator",
          "name": "Iterator",
          "isArray": false
        },
        "name": "itor"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "nonstrict_ends"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.Iterator",
            "name": "Iterator",
            "isArray": false
          },
          "name": "itor"
        },
        "comment": "iterator of operands",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "nonstrict_ends"
        },
        "comment": "whether endpoints are NOT subject to the strict density requirement",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "an array of two integers (r,m) such that each number in NUMS is equal to r (mod m), or null if no such exists or the iterator contains fewer than 3 elements",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "mod_positive(long x,long y)",
    "name": "mod_positive",
    "containingClass": {
      "qualifiedName": "plume.MathMDE",
      "name": "MathMDE",
      "isArray": false
    },
    "targetClass": "plume.MathMDE",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "x"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "y"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "x"
        },
        "comment": "value to be modded",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "y"
        },
        "comment": "modulus",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "x % y, where the result is constrained to be positive",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "modulus(long[] nums)",
    "name": "modulus",
    "containingClass": {
      "qualifiedName": "plume.MathMDE",
      "name": "MathMDE",
      "isArray": false
    },
    "targetClass": "plume.MathMDE",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long[]",
      "name": "long[]",
      "isArray": true,
      "componentType": {
        "qualifiedName": "long",
        "name": "long",
        "isArray": false
      }
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long[]",
          "name": "long[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          }
        },
        "name": "nums"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "long[]",
            "name": "long[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "long",
              "name": "long",
              "isArray": false
            }
          },
          "name": "nums"
        },
        "comment": "array of operands",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "an array of two integers (r,m) such that each number in NUMS is equal to r (mod m), or null if no such exists or the iterator contains fewer than 3 elements",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "modulus_long(java.util.Iterator itor)",
    "name": "modulus_long",
    "containingClass": {
      "qualifiedName": "plume.MathMDE",
      "name": "MathMDE",
      "isArray": false
    },
    "targetClass": "plume.MathMDE",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long[]",
      "name": "long[]",
      "isArray": true,
      "componentType": {
        "qualifiedName": "long",
        "name": "long",
        "isArray": false
      }
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Iterator",
          "name": "Iterator",
          "isArray": false
        },
        "name": "itor"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.Iterator",
            "name": "Iterator",
            "isArray": false
          },
          "name": "itor"
        },
        "comment": "iterator of operands",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "an array of two integers (r,m) such that each number in itor is equal to r (mod m), or null if no such exists or the iterator contains fewer than 3 elements",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "modulus_strict(long[] nums,boolean nonstrict_ends)",
    "name": "modulus_strict",
    "containingClass": {
      "qualifiedName": "plume.MathMDE",
      "name": "MathMDE",
      "isArray": false
    },
    "targetClass": "plume.MathMDE",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long[]",
      "name": "long[]",
      "isArray": true,
      "componentType": {
        "qualifiedName": "long",
        "name": "long",
        "isArray": false
      }
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long[]",
          "name": "long[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          }
        },
        "name": "nums"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "nonstrict_ends"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "long[]",
            "name": "long[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "long",
              "name": "long",
              "isArray": false
            }
          },
          "name": "nums"
        },
        "comment": "array of operands",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "nonstrict_ends"
        },
        "comment": "whether endpoints are NOT subject to the strict density requirement",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "an array of two integers (r,m) such that each number in NUMS is equal to r (mod m), or null if no such exists or the array contains fewer than 3 elements",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "modulus_strict_long(java.util.Iterator itor,boolean nonstrict_ends)",
    "name": "modulus_strict_long",
    "containingClass": {
      "qualifiedName": "plume.MathMDE",
      "name": "MathMDE",
      "isArray": false
    },
    "targetClass": "plume.MathMDE",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long[]",
      "name": "long[]",
      "isArray": true,
      "componentType": {
        "qualifiedName": "long",
        "name": "long",
        "isArray": false
      }
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Iterator",
          "name": "Iterator",
          "isArray": false
        },
        "name": "itor"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "nonstrict_ends"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.Iterator",
            "name": "Iterator",
            "isArray": false
          },
          "name": "itor"
        },
        "comment": "iterator of operands",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "nonstrict_ends"
        },
        "comment": "whether endpoints are NOT subject to the strict density requirement",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "an array of two integers (r,m) such that each number in NUMS is equal to r (mod m), or null if no such exists or the iterator contains fewer than 3 elements",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "missing_numbers(int[] nums)",
    "name": "missing_numbers",
    "containingClass": {
      "qualifiedName": "plume.MathMDE",
      "name": "MathMDE",
      "isArray": false
    },
    "targetClass": "plume.MathMDE",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int[]",
      "name": "int[]",
      "isArray": true,
      "componentType": {
        "qualifiedName": "int",
        "name": "int",
        "isArray": false
      }
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int[]",
          "name": "int[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          }
        },
        "name": "nums"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int[]",
            "name": "int[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "int",
              "name": "int",
              "isArray": false
            }
          },
          "name": "nums"
        },
        "comment": "numbers to be excluded; length > 0",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the set: [min(nums)..max(nums)] - nums",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "nonmodulus_strict(int[] nums)",
    "name": "nonmodulus_strict",
    "containingClass": {
      "qualifiedName": "plume.MathMDE",
      "name": "MathMDE",
      "isArray": false
    },
    "targetClass": "plume.MathMDE",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int[]",
      "name": "int[]",
      "isArray": true,
      "componentType": {
        "qualifiedName": "int",
        "name": "int",
        "isArray": false
      }
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int[]",
          "name": "int[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          }
        },
        "name": "nums"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int[]",
            "name": "int[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "int",
              "name": "int",
              "isArray": false
            }
          },
          "name": "nums"
        },
        "comment": "the list of operands",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a (remainder, modulus) pair that fails to match elements of nums",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "nonmodulus_strict_int_internal(java.util.Iterator missing)",
    "name": "nonmodulus_strict_int_internal",
    "containingClass": {
      "qualifiedName": "plume.MathMDE",
      "name": "MathMDE",
      "isArray": false
    },
    "targetClass": "plume.MathMDE",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int[]",
      "name": "int[]",
      "isArray": true,
      "componentType": {
        "qualifiedName": "int",
        "name": "int",
        "isArray": false
      }
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Iterator",
          "name": "Iterator",
          "isArray": false
        },
        "name": "missing"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "check_first_and_last_nonmodulus(int[] rm,plume.UtilMDE.RemoveFirstAndLastIterator rfali)",
    "name": "check_first_and_last_nonmodulus",
    "containingClass": {
      "qualifiedName": "plume.MathMDE",
      "name": "MathMDE",
      "isArray": false
    },
    "targetClass": "plume.MathMDE",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int[]",
          "name": "int[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          }
        },
        "name": "rm"
      },
      {
        "type": {
          "qualifiedName": "plume.UtilMDE.RemoveFirstAndLastIterator",
          "name": "RemoveFirstAndLastIterator",
          "isArray": false
        },
        "name": "rfali"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "nonmodulus_strict_int(java.util.Iterator nums)",
    "name": "nonmodulus_strict_int",
    "containingClass": {
      "qualifiedName": "plume.MathMDE",
      "name": "MathMDE",
      "isArray": false
    },
    "targetClass": "plume.MathMDE",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int[]",
      "name": "int[]",
      "isArray": true,
      "componentType": {
        "qualifiedName": "int",
        "name": "int",
        "isArray": false
      }
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Iterator",
          "name": "Iterator",
          "isArray": false
        },
        "name": "nums"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.Iterator",
            "name": "Iterator",
            "isArray": false
          },
          "name": "nums"
        },
        "comment": "the list of operands",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a (remainder, modulus) pair that fails to match elements of nums",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "nonmodulus_nonstrict(int[] nums)",
    "name": "nonmodulus_nonstrict",
    "containingClass": {
      "qualifiedName": "plume.MathMDE",
      "name": "MathMDE",
      "isArray": false
    },
    "targetClass": "plume.MathMDE",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int[]",
      "name": "int[]",
      "isArray": true,
      "componentType": {
        "qualifiedName": "int",
        "name": "int",
        "isArray": false
      }
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int[]",
          "name": "int[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          }
        },
        "name": "nums"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int[]",
            "name": "int[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "int",
              "name": "int",
              "isArray": false
            }
          },
          "name": "nums"
        },
        "comment": "the list of operands",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a (remainder, modulus) pair that fails to match elements of nums",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "missing_numbers(long[] nums)",
    "name": "missing_numbers",
    "containingClass": {
      "qualifiedName": "plume.MathMDE",
      "name": "MathMDE",
      "isArray": false
    },
    "targetClass": "plume.MathMDE",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long[]",
      "name": "long[]",
      "isArray": true,
      "componentType": {
        "qualifiedName": "long",
        "name": "long",
        "isArray": false
      }
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long[]",
          "name": "long[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          }
        },
        "name": "nums"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "long[]",
            "name": "long[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "long",
              "name": "long",
              "isArray": false
            }
          },
          "name": "nums"
        },
        "comment": "numbers to be excluded; length > 0",
        "kind": "PARAM",
        "condition": "args[0]>0"
      }
    ],
    "returnTag": {
      "comment": "the set: [min(nums)..max(nums)] - nums",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "nonmodulus_strict(long[] nums)",
    "name": "nonmodulus_strict",
    "containingClass": {
      "qualifiedName": "plume.MathMDE",
      "name": "MathMDE",
      "isArray": false
    },
    "targetClass": "plume.MathMDE",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long[]",
      "name": "long[]",
      "isArray": true,
      "componentType": {
        "qualifiedName": "long",
        "name": "long",
        "isArray": false
      }
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long[]",
          "name": "long[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          }
        },
        "name": "nums"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "long[]",
            "name": "long[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "long",
              "name": "long",
              "isArray": false
            }
          },
          "name": "nums"
        },
        "comment": "the list of operands",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a (remainder, modulus) pair that fails to match elements of nums",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "nonmodulus_strict_long_internal(java.util.Iterator missing)",
    "name": "nonmodulus_strict_long_internal",
    "containingClass": {
      "qualifiedName": "plume.MathMDE",
      "name": "MathMDE",
      "isArray": false
    },
    "targetClass": "plume.MathMDE",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long[]",
      "name": "long[]",
      "isArray": true,
      "componentType": {
        "qualifiedName": "long",
        "name": "long",
        "isArray": false
      }
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Iterator",
          "name": "Iterator",
          "isArray": false
        },
        "name": "missing"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "check_first_and_last_nonmodulus(long[] rm,plume.UtilMDE.RemoveFirstAndLastIterator rfali)",
    "name": "check_first_and_last_nonmodulus",
    "containingClass": {
      "qualifiedName": "plume.MathMDE",
      "name": "MathMDE",
      "isArray": false
    },
    "targetClass": "plume.MathMDE",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long[]",
          "name": "long[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          }
        },
        "name": "rm"
      },
      {
        "type": {
          "qualifiedName": "plume.UtilMDE.RemoveFirstAndLastIterator",
          "name": "RemoveFirstAndLastIterator",
          "isArray": false
        },
        "name": "rfali"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "nonmodulus_strict_long(java.util.Iterator nums)",
    "name": "nonmodulus_strict_long",
    "containingClass": {
      "qualifiedName": "plume.MathMDE",
      "name": "MathMDE",
      "isArray": false
    },
    "targetClass": "plume.MathMDE",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long[]",
      "name": "long[]",
      "isArray": true,
      "componentType": {
        "qualifiedName": "long",
        "name": "long",
        "isArray": false
      }
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Iterator",
          "name": "Iterator",
          "isArray": false
        },
        "name": "nums"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.Iterator",
            "name": "Iterator",
            "isArray": false
          },
          "name": "nums"
        },
        "comment": "the list of operands",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a (remainder, modulus) pair that fails to match elements of nums",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "nonmodulus_nonstrict(long[] nums)",
    "name": "nonmodulus_nonstrict",
    "containingClass": {
      "qualifiedName": "plume.MathMDE",
      "name": "MathMDE",
      "isArray": false
    },
    "targetClass": "plume.MathMDE",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long[]",
      "name": "long[]",
      "isArray": true,
      "componentType": {
        "qualifiedName": "long",
        "name": "long",
        "isArray": false
      }
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long[]",
          "name": "long[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          }
        },
        "name": "nums"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "long[]",
            "name": "long[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "long",
              "name": "long",
              "isArray": false
            }
          },
          "name": "nums"
        },
        "comment": "the list of operands",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a (remainder, modulus) pair that fails to match elements of nums",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  }
]
