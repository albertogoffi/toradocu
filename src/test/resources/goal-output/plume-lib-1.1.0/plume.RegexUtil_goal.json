[
  {
    "containingClass": {
      "isArray": false,
      "name": "RegexUtil",
      "qualifiedName": "plume.RegexUtil"
    },
    "isVarArgs": false,
    "name": "RegexUtil",
    "paramTags": [],
    "parameters": [],
    "signature": "RegexUtil()",
    "targetClass": "plume.RegexUtil",
    "throwsTags": []
  },
  {
    "containingClass": {
      "isArray": false,
      "name": "RegexUtil",
      "qualifiedName": "plume.RegexUtil"
    },
    "isVarArgs": false,
    "name": "isRegex",
    "paramTags": [
      {
        "comment": "string to check for being a regular expression",
        "condition": "",
        "kind": "@param",
        "parameter": {
          "name": "s",
          "type": {
            "isArray": false,
            "name": "String",
            "qualifiedName": "java.lang.String"
          }
        }
      }
    ],
    "parameters": [
      {
        "name": "s",
        "type": {
          "isArray": false,
          "name": "String",
          "qualifiedName": "java.lang.String"
        }
      }
    ],
    "returnTag": {
      "comment": "true iff s is a regular expression",
      "condition": "",
      "kind": "RETURN"
    },
    "returnType": {
      "isArray": false,
      "name": "boolean",
      "qualifiedName": "boolean"
    },
    "signature": "isRegex(java.lang.String s)",
    "targetClass": "plume.RegexUtil",
    "throwsTags": []
  },
  {
    "containingClass": {
      "isArray": false,
      "name": "RegexUtil",
      "qualifiedName": "plume.RegexUtil"
    },
    "isVarArgs": false,
    "name": "isRegex",
    "paramTags": [
      {
        "comment": "string to check for being a regular expression",
        "condition": "",
        "kind": "@param",
        "parameter": {
          "name": "s",
          "type": {
            "isArray": false,
            "name": "String",
            "qualifiedName": "java.lang.String"
          }
        }
      },
      {
        "comment": "number of groups expected",
        "condition": "",
        "kind": "@param",
        "parameter": {
          "name": "groups",
          "type": {
            "isArray": false,
            "name": "int",
            "qualifiedName": "int"
          }
        }
      }
    ],
    "parameters": [
      {
        "name": "s",
        "type": {
          "isArray": false,
          "name": "String",
          "qualifiedName": "java.lang.String"
        }
      },
      {
        "name": "groups",
        "type": {
          "isArray": false,
          "name": "int",
          "qualifiedName": "int"
        }
      }
    ],
    "returnTag": {
      "comment": "true iff s is a regular expression with groups groups",
      "condition": "",
      "kind": "RETURN"
    },
    "returnType": {
      "isArray": false,
      "name": "boolean",
      "qualifiedName": "boolean"
    },
    "signature": "isRegex(java.lang.String s,int groups)",
    "targetClass": "plume.RegexUtil",
    "throwsTags": []
  },
  {
    "containingClass": {
      "isArray": false,
      "name": "RegexUtil",
      "qualifiedName": "plume.RegexUtil"
    },
    "isVarArgs": false,
    "name": "isRegex",
    "paramTags": [
      {
        "comment": "char to check for being a regular expression",
        "condition": "",
        "kind": "@param",
        "parameter": {
          "name": "c",
          "type": {
            "isArray": false,
            "name": "char",
            "qualifiedName": "char"
          }
        }
      }
    ],
    "parameters": [
      {
        "name": "c",
        "type": {
          "isArray": false,
          "name": "char",
          "qualifiedName": "char"
        }
      }
    ],
    "returnTag": {
      "comment": "true iff c is a regular expression",
      "condition": "",
      "kind": "RETURN"
    },
    "returnType": {
      "isArray": false,
      "name": "boolean",
      "qualifiedName": "boolean"
    },
    "signature": "isRegex(char c)",
    "targetClass": "plume.RegexUtil",
    "throwsTags": []
  },
  {
    "containingClass": {
      "isArray": false,
      "name": "RegexUtil",
      "qualifiedName": "plume.RegexUtil"
    },
    "isVarArgs": false,
    "name": "regexError",
    "paramTags": [
      {
        "comment": "string to check for being a regular expression",
        "condition": "",
        "kind": "@param",
        "parameter": {
          "name": "s",
          "type": {
            "isArray": false,
            "name": "String",
            "qualifiedName": "java.lang.String"
          }
        }
      }
    ],
    "parameters": [
      {
        "name": "s",
        "type": {
          "isArray": false,
          "name": "String",
          "qualifiedName": "java.lang.String"
        }
      }
    ],
    "returnTag": {
      "comment": "null, or a string describing why the argument is not a regex",
      "condition": "",
      "kind": "RETURN"
    },
    "returnType": {
      "isArray": false,
      "name": "String",
      "qualifiedName": "java.lang.String"
    },
    "signature": "regexError(java.lang.String s)",
    "targetClass": "plume.RegexUtil",
    "throwsTags": []
  },
  {
    "containingClass": {
      "isArray": false,
      "name": "RegexUtil",
      "qualifiedName": "plume.RegexUtil"
    },
    "isVarArgs": false,
    "name": "regexError",
    "paramTags": [
      {
        "comment": "string to check for being a regular expression",
        "condition": "",
        "kind": "@param",
        "parameter": {
          "name": "s",
          "type": {
            "isArray": false,
            "name": "String",
            "qualifiedName": "java.lang.String"
          }
        }
      },
      {
        "comment": "number of groups expected",
        "condition": "",
        "kind": "@param",
        "parameter": {
          "name": "groups",
          "type": {
            "isArray": false,
            "name": "int",
            "qualifiedName": "int"
          }
        }
      }
    ],
    "parameters": [
      {
        "name": "s",
        "type": {
          "isArray": false,
          "name": "String",
          "qualifiedName": "java.lang.String"
        }
      },
      {
        "name": "groups",
        "type": {
          "isArray": false,
          "name": "int",
          "qualifiedName": "int"
        }
      }
    ],
    "returnTag": {
      "comment": "null, or a string describing why the argument is not a regex",
      "condition": "",
      "kind": "RETURN"
    },
    "returnType": {
      "isArray": false,
      "name": "String",
      "qualifiedName": "java.lang.String"
    },
    "signature": "regexError(java.lang.String s,int groups)",
    "targetClass": "plume.RegexUtil",
    "throwsTags": []
  },
  {
    "containingClass": {
      "isArray": false,
      "name": "RegexUtil",
      "qualifiedName": "plume.RegexUtil"
    },
    "isVarArgs": false,
    "name": "regexException",
    "paramTags": [
      {
        "comment": "string to check for being a regular expression",
        "condition": "",
        "kind": "@param",
        "parameter": {
          "name": "s",
          "type": {
            "isArray": false,
            "name": "String",
            "qualifiedName": "java.lang.String"
          }
        }
      }
    ],
    "parameters": [
      {
        "name": "s",
        "type": {
          "isArray": false,
          "name": "String",
          "qualifiedName": "java.lang.String"
        }
      }
    ],
    "returnTag": {
      "comment": "null, or a PatternSyntaxException describing why the argument is not a regex",
      "condition": "",
      "kind": "RETURN"
    },
    "returnType": {
      "isArray": false,
      "name": "PatternSyntaxException",
      "qualifiedName": "java.util.regex.PatternSyntaxException"
    },
    "signature": "regexException(java.lang.String s)",
    "targetClass": "plume.RegexUtil",
    "throwsTags": []
  },
  {
    "containingClass": {
      "isArray": false,
      "name": "RegexUtil",
      "qualifiedName": "plume.RegexUtil"
    },
    "isVarArgs": false,
    "name": "regexException",
    "paramTags": [
      {
        "comment": "string to check for being a regular expression",
        "condition": "",
        "kind": "@param",
        "parameter": {
          "name": "s",
          "type": {
            "isArray": false,
            "name": "String",
            "qualifiedName": "java.lang.String"
          }
        }
      },
      {
        "comment": "number of groups expected",
        "condition": "",
        "kind": "@param",
        "parameter": {
          "name": "groups",
          "type": {
            "isArray": false,
            "name": "int",
            "qualifiedName": "int"
          }
        }
      }
    ],
    "parameters": [
      {
        "name": "s",
        "type": {
          "isArray": false,
          "name": "String",
          "qualifiedName": "java.lang.String"
        }
      },
      {
        "name": "groups",
        "type": {
          "isArray": false,
          "name": "int",
          "qualifiedName": "int"
        }
      }
    ],
    "returnTag": {
      "comment": "null, or a PatternSyntaxException describing why the argument is not a regex",
      "condition": "",
      "kind": "RETURN"
    },
    "returnType": {
      "isArray": false,
      "name": "PatternSyntaxException",
      "qualifiedName": "java.util.regex.PatternSyntaxException"
    },
    "signature": "regexException(java.lang.String s,int groups)",
    "targetClass": "plume.RegexUtil",
    "throwsTags": []
  },
  {
    "containingClass": {
      "isArray": false,
      "name": "RegexUtil",
      "qualifiedName": "plume.RegexUtil"
    },
    "isVarArgs": false,
    "name": "asRegex",
    "paramTags": [
      {
        "comment": "string to check for being a regular expression",
        "condition": "",
        "kind": "@param",
        "parameter": {
          "name": "s",
          "type": {
            "isArray": false,
            "name": "String",
            "qualifiedName": "java.lang.String"
          }
        }
      }
    ],
    "parameters": [
      {
        "name": "s",
        "type": {
          "isArray": false,
          "name": "String",
          "qualifiedName": "java.lang.String"
        }
      }
    ],
    "returnTag": {
      "comment": "its argument",
      "condition": "",
      "kind": "RETURN"
    },
    "returnType": {
      "isArray": false,
      "name": "String",
      "qualifiedName": "java.lang.String"
    },
    "signature": "asRegex(java.lang.String s)",
    "targetClass": "plume.RegexUtil",
    "throwsTags": [
      {
        "comment": "if argument is not a regex",
        "condition": "(plume.RegexUtil.isRegex(args[0])) == false",
        "exception": {
          "isArray": false,
          "name": "Error",
          "qualifiedName": "java.lang.Error"
        },
        "kind": "@throws"
      }
    ]
  },
  {
    "containingClass": {
      "isArray": false,
      "name": "RegexUtil",
      "qualifiedName": "plume.RegexUtil"
    },
    "isVarArgs": false,
    "name": "asRegex",
    "paramTags": [
      {
        "comment": "string to check for being a regular expression",
        "condition": "",
        "kind": "@param",
        "parameter": {
          "name": "s",
          "type": {
            "isArray": false,
            "name": "String",
            "qualifiedName": "java.lang.String"
          }
        }
      },
      {
        "comment": "number of groups expected",
        "condition": "",
        "kind": "@param",
        "parameter": {
          "name": "groups",
          "type": {
            "isArray": false,
            "name": "int",
            "qualifiedName": "int"
          }
        }
      }
    ],
    "parameters": [
      {
        "name": "s",
        "type": {
          "isArray": false,
          "name": "String",
          "qualifiedName": "java.lang.String"
        }
      },
      {
        "name": "groups",
        "type": {
          "isArray": false,
          "name": "int",
          "qualifiedName": "int"
        }
      }
    ],
    "returnTag": {
      "comment": "its argument",
      "condition": "",
      "kind": "RETURN"
    },
    "returnType": {
      "isArray": false,
      "name": "String",
      "qualifiedName": "java.lang.String"
    },
    "signature": "asRegex(java.lang.String s,int groups)",
    "targetClass": "plume.RegexUtil",
    "throwsTags": [
      {
        "comment": "if argument is not a regex",
        "condition": "(plume.RegexUtil.isRegex(args[0])) == false",
        "exception": {
          "isArray": false,
          "name": "Error",
          "qualifiedName": "java.lang.Error"
        },
        "kind": "@throws"
      }
    ]
  },
  {
    "containingClass": {
      "isArray": false,
      "name": "RegexUtil",
      "qualifiedName": "plume.RegexUtil"
    },
    "isVarArgs": false,
    "name": "regexErrorMessage",
    "paramTags": [
      {
        "comment": "string to check for being a regular expression",
        "condition": "",
        "kind": "@param",
        "parameter": {
          "name": "s",
          "type": {
            "isArray": false,
            "name": "String",
            "qualifiedName": "java.lang.String"
          }
        }
      }
    ],
    "parameters": [
      {
        "name": "s",
        "type": {
          "isArray": false,
          "name": "String",
          "qualifiedName": "java.lang.String"
        }
      },
      {
        "name": "expectedGroups",
        "type": {
          "isArray": false,
          "name": "int",
          "qualifiedName": "int"
        }
      },
      {
        "name": "actualGroups",
        "type": {
          "isArray": false,
          "name": "int",
          "qualifiedName": "int"
        }
      }
    ],
    "returnTag": {
      "comment": "an error message for s when expectedGroups groups are needed, but s only has actualGroups groups",
      "condition": "",
      "kind": "RETURN"
    },
    "returnType": {
      "isArray": false,
      "name": "String",
      "qualifiedName": "java.lang.String"
    },
    "signature": "regexErrorMessage(java.lang.String s,int expectedGroups,int actualGroups)",
    "targetClass": "plume.RegexUtil",
    "throwsTags": []
  },
  {
    "containingClass": {
      "isArray": false,
      "name": "RegexUtil",
      "qualifiedName": "plume.RegexUtil"
    },
    "isVarArgs": false,
    "name": "getGroupCount",
    "paramTags": [
      {
        "comment": "pattern whose groups to count",
        "condition": "",
        "kind": "@param",
        "parameter": {
          "name": "p",
          "type": {
            "isArray": false,
            "name": "Pattern",
            "qualifiedName": "java.util.regex.Pattern"
          }
        }
      }
    ],
    "parameters": [
      {
        "name": "p",
        "type": {
          "isArray": false,
          "name": "Pattern",
          "qualifiedName": "java.util.regex.Pattern"
        }
      }
    ],
    "returnTag": {
      "comment": "the count of groups in the argument",
      "condition": "",
      "kind": "RETURN"
    },
    "returnType": {
      "isArray": false,
      "name": "int",
      "qualifiedName": "int"
    },
    "signature": "getGroupCount(java.util.regex.Pattern p)",
    "targetClass": "plume.RegexUtil",
    "throwsTags": []
  }
]
