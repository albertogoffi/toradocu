[
  {
    "signature": "Unit(net.sf.freecol.common.model.Game game)",
    "name": "Unit",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Game",
          "name": "Game",
          "isArray": false
        },
        "name": "game"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Game",
            "name": "Game",
            "isArray": false
          },
          "name": "game"
        },
        "comment": "The enclosing Game.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "Unit(net.sf.freecol.common.model.Game game,org.w3c.dom.Element e)",
    "name": "Unit",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Game",
          "name": "Game",
          "isArray": false
        },
        "name": "game"
      },
      {
        "type": {
          "qualifiedName": "org.w3c.dom.Element",
          "name": "Element",
          "isArray": false
        },
        "name": "e"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Game",
            "name": "Game",
            "isArray": false
          },
          "name": "game"
        },
        "comment": "The enclosing Game.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.w3c.dom.Element",
            "name": "Element",
            "isArray": false
          },
          "name": "e"
        },
        "comment": "An XML-element that will be used to initialize this object.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "Unit(net.sf.freecol.common.model.Game game,java.lang.String id)",
    "name": "Unit",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Game",
          "name": "Game",
          "isArray": false
        },
        "name": "game"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "id"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Game",
            "name": "Game",
            "isArray": false
          },
          "name": "game"
        },
        "comment": "The enclosing Game.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "id"
        },
        "comment": "The object identifier.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "getName()",
    "name": "getName",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "String",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The individual name.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "setName(java.lang.String newName)",
    "name": "setName",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "newName"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "newName"
        },
        "comment": "The new name.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "getApparentOwnerName()",
    "name": "getApparentOwnerName",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.StringTemplate",
      "name": "StringTemplate",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The name of the apparent owner of this Unit.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getLabel()",
    "name": "getLabel",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.StringTemplate",
      "name": "StringTemplate",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The StringTemplate to describe the given unit.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getLabel(net.sf.freecol.common.model.Unit.UnitLabelType ult)",
    "name": "getLabel",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.StringTemplate",
      "name": "StringTemplate",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Unit.UnitLabelType",
          "name": "UnitLabelType",
          "isArray": false
        },
        "name": "ult"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Unit.UnitLabelType",
            "name": "UnitLabelType",
            "isArray": false
          },
          "name": "ult"
        },
        "comment": "The type of label to get.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "The StringTemplate to describe the given unit.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getDescription()",
    "name": "getDescription",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "String",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "A String describing this unit.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getDescription(net.sf.freecol.common.model.Unit.UnitLabelType ult)",
    "name": "getDescription",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Unit.UnitLabelType",
          "name": "UnitLabelType",
          "isArray": false
        },
        "name": "ult"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Unit.UnitLabelType",
            "name": "UnitLabelType",
            "isArray": false
          },
          "name": "ult"
        },
        "comment": "The label type required.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A String describing this unit.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getCombatLabel(net.sf.freecol.common.model.Tile tile)",
    "name": "getCombatLabel",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.StringTemplate",
      "name": "StringTemplate",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Tile",
          "name": "Tile",
          "isArray": false
        },
        "name": "tile"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Tile",
            "name": "Tile",
            "isArray": false
          },
          "name": "tile"
        },
        "comment": "The Tile to attack into.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A suitable label.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getDestinationLabel()",
    "name": "getDestinationLabel",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.StringTemplate",
      "name": "StringTemplate",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "A StringTemplate describing where this unit is going.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getDestinationLabel(java.lang.String tag,net.sf.freecol.common.model.Location destination,net.sf.freecol.common.model.Player player)",
    "name": "getDestinationLabel",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.StringTemplate",
      "name": "StringTemplate",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "tag"
      },
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Location",
          "name": "Location",
          "isArray": false
        },
        "name": "destination"
      },
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Player",
          "name": "Player",
          "isArray": false
        },
        "name": "player"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "tag"
        },
        "comment": "The unit tag for the \"goingTo\" message.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Location",
            "name": "Location",
            "isArray": false
          },
          "name": "destination"
        },
        "comment": "The destination Location.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Player",
            "name": "Player",
            "isArray": false
          },
          "name": "player"
        },
        "comment": "The Player viewpoint.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A StringTemplate describing the unit movement.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getRepairLabel()",
    "name": "getRepairLabel",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.StringTemplate",
      "name": "StringTemplate",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "A repair label.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getType()",
    "name": "getType",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.UnitType",
      "name": "UnitType",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The current UnitType.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "setType(net.sf.freecol.common.model.UnitType unitType)",
    "name": "setType",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.UnitType",
          "name": "UnitType",
          "isArray": false
        },
        "name": "unitType"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.UnitType",
            "name": "UnitType",
            "isArray": false
          },
          "name": "unitType"
        },
        "comment": "The new type of the unit.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "changeType(net.sf.freecol.common.model.UnitType unitType)",
    "name": "changeType",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.UnitType",
          "name": "UnitType",
          "isArray": false
        },
        "name": "unitType"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.UnitType",
            "name": "UnitType",
            "isArray": false
          },
          "name": "unitType"
        },
        "comment": "The new type of the unit.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "True if the type change succeeds.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isNaval()",
    "name": "isNaval",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "True if this is a naval Unit.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isUndead()",
    "name": "isUndead",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "True if the unit is undead.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "canCarryTreasure()",
    "name": "canCarryTreasure",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "True if this Unit can carry treasure.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "canCaptureGoods()",
    "name": "canCaptureGoods",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "True if this Unit is capable of capturing goods.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isTradingUnit()",
    "name": "isTradingUnit",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "True if this is a trading unit.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isColonist()",
    "name": "isColonist",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "True if this unit is a colonist.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isCarrier()",
    "name": "isCarrier",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "True if this unit can carry goods or other units.",
      "kind": "RETURN",
      "condition": "(target.canCarryGoods() || target.canCarryUnits()) ? result==true:result==false"
    },
    "throwsTags": []
  },
  {
    "signature": "isPerson()",
    "name": "isPerson",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "True if this unit is a person.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getState()",
    "name": "getState",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.Unit.UnitState",
      "name": "UnitState",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The state of this Unit.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "checkSetState(net.sf.freecol.common.model.Unit.UnitState s)",
    "name": "checkSetState",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Unit.UnitState",
          "name": "UnitState",
          "isArray": false
        },
        "name": "s"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Unit.UnitState",
            "name": "UnitState",
            "isArray": false
          },
          "name": "s"
        },
        "comment": "The new state for this Unit. Should be one of {UnitState.ACTIVE, FORTIFIED, ...}.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "True if the Unit state can be changed to the new value.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "setState(net.sf.freecol.common.model.Unit.UnitState s)",
    "name": "setState",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Unit.UnitState",
          "name": "UnitState",
          "isArray": false
        },
        "name": "s"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Unit.UnitState",
            "name": "UnitState",
            "isArray": false
          },
          "name": "s"
        },
        "comment": "The new state for this Unit. Should be one of {UnitState.ACTIVE, UnitState.FORTIFIED, ...}.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "setStateUnchecked(net.sf.freecol.common.model.Unit.UnitState s)",
    "name": "setStateUnchecked",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Unit.UnitState",
          "name": "UnitState",
          "isArray": false
        },
        "name": "s"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Unit.UnitState",
            "name": "UnitState",
            "isArray": false
          },
          "name": "s"
        },
        "comment": "The new UnitState.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "setStateToAllChildren(net.sf.freecol.common.model.Unit.UnitState state)",
    "name": "setStateToAllChildren",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Unit.UnitState",
          "name": "UnitState",
          "isArray": false
        },
        "name": "state"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Unit.UnitState",
            "name": "UnitState",
            "isArray": false
          },
          "name": "state"
        },
        "comment": "The UnitState to set..",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "changeOwner(net.sf.freecol.common.model.Player owner)",
    "name": "changeOwner",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Player",
          "name": "Player",
          "isArray": false
        },
        "name": "owner"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Player",
            "name": "Player",
            "isArray": false
          },
          "name": "owner"
        },
        "comment": "The new owner Player.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "getRole()",
    "name": "getRole",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.Role",
      "name": "Role",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The Role of this Unit.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "setRole(net.sf.freecol.common.model.Role role)",
    "name": "setRole",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Role",
          "name": "Role",
          "isArray": false
        },
        "name": "role"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Role",
            "name": "Role",
            "isArray": false
          },
          "name": "role"
        },
        "comment": "The new Role.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "getRoleCount()",
    "name": "getRoleCount",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The current role count.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "setRoleCount(int roleCount)",
    "name": "setRoleCount",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "roleCount"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "roleCount"
        },
        "comment": "The new role count.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "hasDefaultRole()",
    "name": "hasDefaultRole",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "True if the unit has the default Role.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getRoleSuffix()",
    "name": "getRoleSuffix",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "String",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The role suffix.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "changeRole(net.sf.freecol.common.model.Role role,int roleCount)",
    "name": "changeRole",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Role",
          "name": "Role",
          "isArray": false
        },
        "name": "role"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "roleCount"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Role",
            "name": "Role",
            "isArray": false
          },
          "name": "role"
        },
        "comment": "The new Role.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "roleCount"
        },
        "comment": "The new role count.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "changeRoleCount(int delta)",
    "name": "changeRoleCount",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "delta"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "delta"
        },
        "comment": "The change to apply to the role count.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "True if the role count reached zero.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "roleIsAvailable(net.sf.freecol.common.model.Role role)",
    "name": "roleIsAvailable",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Role",
          "name": "Role",
          "isArray": false
        },
        "name": "role"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Role",
            "name": "Role",
            "isArray": false
          },
          "name": "role"
        },
        "comment": "The Role to test.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "True if the role is available to this unit.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getAvailableRoles(java.util.List roles)",
    "name": "getAvailableRoles",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List",
      "name": "List",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.List",
          "name": "List",
          "isArray": false
        },
        "name": "roles"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.List",
            "name": "List",
            "isArray": false
          },
          "name": "roles"
        },
        "comment": "The list of Roles to filter, if null all available roles are used.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A list of available Roles.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getMilitaryRole()",
    "name": "getMilitaryRole",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.Role",
      "name": "Role",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "A military Role, or null if none found.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getGoodsDifference(net.sf.freecol.common.model.Role role,int roleCount)",
    "name": "getGoodsDifference",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List",
      "name": "List",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Role",
          "name": "Role",
          "isArray": false
        },
        "name": "role"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "roleCount"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Role",
            "name": "Role",
            "isArray": false
          },
          "name": "role"
        },
        "comment": "The new Role to change to.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "roleCount"
        },
        "comment": "The new role count.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A list of AbstractGoods defining the change in goods required.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "setLocationNoUpdate(net.sf.freecol.common.model.Location newLocation)",
    "name": "setLocationNoUpdate",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Location",
          "name": "Location",
          "isArray": false
        },
        "name": "newLocation"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Location",
            "name": "Location",
            "isArray": false
          },
          "name": "newLocation"
        },
        "comment": "The new Location.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "isOnCarrier()",
    "name": "isOnCarrier",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "True if the unit is aboard a carrier.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getCarrier()",
    "name": "getCarrier",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The carrier this unit is aboard, or null if none.",
      "kind": "RETURN",
      "condition": "!target.isOnCarrier() ? result==null"
    },
    "throwsTags": []
  },
  {
    "signature": "isAtSea()",
    "name": "isAtSea",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "True if at sea.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isInMission()",
    "name": "isInMission",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "True if this unit is running a mission.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isInColony()",
    "name": "isInColony",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "True if in colony.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "hasTile()",
    "name": "hasTile",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "True if this unit is on a tile.",
      "kind": "RETURN",
      "condition": "target.getTile()!=null ? result==true"
    },
    "throwsTags": []
  },
  {
    "signature": "getWorkLocation()",
    "name": "getWorkLocation",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.WorkLocation",
      "name": "WorkLocation",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The current WorkLocation, or null if none.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getWorkBuilding()",
    "name": "getWorkBuilding",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.Building",
      "name": "Building",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The current Building, or null if none.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getWorkTile()",
    "name": "getWorkTile",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.ColonyTile",
      "name": "ColonyTile",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The current ColonyTile, or null if none.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getEntryLocation()",
    "name": "getEntryLocation",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.Location",
      "name": "Location",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The entry Location.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "setEntryLocation(net.sf.freecol.common.model.Location entryLocation)",
    "name": "setEntryLocation",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Location",
          "name": "Location",
          "isArray": false
        },
        "name": "entryLocation"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Location",
            "name": "Location",
            "isArray": false
          },
          "name": "entryLocation"
        },
        "comment": "The new entry Location.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "getFullEntryLocation()",
    "name": "getFullEntryLocation",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The entry Tile.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getMovesLeft()",
    "name": "getMovesLeft",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The number of moves this Unit has left.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "setMovesLeft(int moves)",
    "name": "setMovesLeft",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "moves"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "moves"
        },
        "comment": "The new amount of moves left this Unit should have.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "getWorkType()",
    "name": "getWorkType",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.GoodsType",
      "name": "GoodsType",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The type of goods this unit is producing.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "setWorkType(net.sf.freecol.common.model.GoodsType type)",
    "name": "setWorkType",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.GoodsType",
          "name": "GoodsType",
          "isArray": false
        },
        "name": "type"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.GoodsType",
            "name": "GoodsType",
            "isArray": false
          },
          "name": "type"
        },
        "comment": "The GoodsType to produce.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "changeWorkType(net.sf.freecol.common.model.GoodsType type)",
    "name": "changeWorkType",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.GoodsType",
          "name": "GoodsType",
          "isArray": false
        },
        "name": "type"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.GoodsType",
            "name": "GoodsType",
            "isArray": false
          },
          "name": "type"
        },
        "comment": "The GoodsType to produce.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "getExperienceType()",
    "name": "getExperienceType",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.GoodsType",
      "name": "GoodsType",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The type of goods this unit would produce.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getExperience()",
    "name": "getExperience",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The experience of this Unit at its current experienceType.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "setExperience(int experience)",
    "name": "setExperience",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "experience"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "experience"
        },
        "comment": "The new experience of this Unit at its current experienceType.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "modifyExperience(int value)",
    "name": "modifyExperience",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "value"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "value"
        },
        "comment": "The value by which to modify the experience of this Unit.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "getWorkLeft()",
    "name": "getWorkLeft",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The amount of work left.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "setWorkLeft(int workLeft)",
    "name": "setWorkLeft",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "workLeft"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "workLeft"
        },
        "comment": "The new amount of work left.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "getWorkTurnsLeft()",
    "name": "getWorkTurnsLeft",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The number of turns of work left.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getWorkImprovement()",
    "name": "getWorkImprovement",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.TileImprovement",
      "name": "TileImprovement",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The TileImprovement the pioneer is working on.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "setWorkImprovement(net.sf.freecol.common.model.TileImprovement imp)",
    "name": "setWorkImprovement",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.TileImprovement",
          "name": "TileImprovement",
          "isArray": false
        },
        "name": "imp"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.TileImprovement",
            "name": "TileImprovement",
            "isArray": false
          },
          "name": "imp"
        },
        "comment": "The new TileImprovement the pioneer is to work on.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "getStudent()",
    "name": "getStudent",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "A student Unit if any.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "setStudent(net.sf.freecol.common.model.Unit newStudent)",
    "name": "setStudent",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Unit",
          "name": "Unit",
          "isArray": false
        },
        "name": "newStudent"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Unit",
            "name": "Unit",
            "isArray": false
          },
          "name": "newStudent"
        },
        "comment": "The new student Unit.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "getTeacher()",
    "name": "getTeacher",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "A teacher Unit.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "setTeacher(net.sf.freecol.common.model.Unit newTeacher)",
    "name": "setTeacher",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Unit",
          "name": "Unit",
          "isArray": false
        },
        "name": "newTeacher"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Unit",
            "name": "Unit",
            "isArray": false
          },
          "name": "newTeacher"
        },
        "comment": "The new teacher Unit.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "getTurnsOfTraining()",
    "name": "getTurnsOfTraining",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The number of turns of training this Unit has given.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "setTurnsOfTraining(int turnsOfTraining)",
    "name": "setTurnsOfTraining",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "turnsOfTraining"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "turnsOfTraining"
        },
        "comment": "The number of turns of training this Unit has given.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "getNeededTurnsOfTraining()",
    "name": "getNeededTurnsOfTraining",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The turns of training needed to teach its current type to a free colonist or to promote an indentured servant or a petty criminal.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getNeededTurnsOfTraining(net.sf.freecol.common.model.UnitType typeTeacher,net.sf.freecol.common.model.UnitType typeStudent)",
    "name": "getNeededTurnsOfTraining",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.UnitType",
          "name": "UnitType",
          "isArray": false
        },
        "name": "typeTeacher"
      },
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.UnitType",
          "name": "UnitType",
          "isArray": false
        },
        "name": "typeStudent"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.UnitType",
            "name": "UnitType",
            "isArray": false
          },
          "name": "typeTeacher"
        },
        "comment": "The teacher UnitType.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.UnitType",
            "name": "UnitType",
            "isArray": false
          },
          "name": "typeStudent"
        },
        "comment": "the student UnitType.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "The turns of training needed to teach its current type to a free colonist or to promote an indentured servant or a petty criminal.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getUnitTypeTeaching(net.sf.freecol.common.model.UnitType typeTeacher,net.sf.freecol.common.model.UnitType typeStudent)",
    "name": "getUnitTypeTeaching",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.UnitType",
      "name": "UnitType",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.UnitType",
          "name": "UnitType",
          "isArray": false
        },
        "name": "typeTeacher"
      },
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.UnitType",
          "name": "UnitType",
          "isArray": false
        },
        "name": "typeStudent"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.UnitType",
            "name": "UnitType",
            "isArray": false
          },
          "name": "typeTeacher"
        },
        "comment": "The teacher UnitType.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.UnitType",
            "name": "UnitType",
            "isArray": false
          },
          "name": "typeStudent"
        },
        "comment": "The student UnitType.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "The UnitType taught.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "canBeStudent(net.sf.freecol.common.model.Unit teacher)",
    "name": "canBeStudent",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Unit",
          "name": "Unit",
          "isArray": false
        },
        "name": "teacher"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Unit",
            "name": "Unit",
            "isArray": false
          },
          "name": "teacher"
        },
        "comment": "The teacher Unit which is trying to teach it.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "True if the unit can be taught by the teacher.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "canBeStudent(net.sf.freecol.common.model.UnitType typeStudent,net.sf.freecol.common.model.UnitType typeTeacher)",
    "name": "canBeStudent",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.UnitType",
          "name": "UnitType",
          "isArray": false
        },
        "name": "typeStudent"
      },
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.UnitType",
          "name": "UnitType",
          "isArray": false
        },
        "name": "typeTeacher"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.UnitType",
            "name": "UnitType",
            "isArray": false
          },
          "name": "typeStudent"
        },
        "comment": "The student UnitType.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.UnitType",
            "name": "UnitType",
            "isArray": false
          },
          "name": "typeTeacher"
        },
        "comment": "The teacher UnitType.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "True if the student can be taught by the teacher.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getNationality()",
    "name": "getNationality",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "String",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The nationality of this Unit.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "setNationality(java.lang.String newNationality)",
    "name": "setNationality",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "newNationality"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "newNationality"
        },
        "comment": "The new nationality of this Unit.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "getEthnicity()",
    "name": "getEthnicity",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "String",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The ethnicity of this Unit.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "setEthnicity(java.lang.String newEthnicity)",
    "name": "setEthnicity",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "newEthnicity"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "newEthnicity"
        },
        "comment": "The new ethnicity of this Unit.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "hasNativeEthnicity()",
    "name": "hasNativeEthnicity",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "Whether this unit looks native or not.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getHomeIndianSettlement()",
    "name": "getHomeIndianSettlement",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.IndianSettlement",
      "name": "IndianSettlement",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The home IndianSettlement of this unit.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "setHomeIndianSettlement(net.sf.freecol.common.model.IndianSettlement indianSettlement)",
    "name": "setHomeIndianSettlement",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.IndianSettlement",
          "name": "IndianSettlement",
          "isArray": false
        },
        "name": "indianSettlement"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.IndianSettlement",
            "name": "IndianSettlement",
            "isArray": false
          },
          "name": "indianSettlement"
        },
        "comment": "The IndianSettlement that should now own this Unit.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "getHitPoints()",
    "name": "getHitPoints",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The hit points this Unit has.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "setHitPoints(int hitPoints)",
    "name": "setHitPoints",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "hitPoints"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "hitPoints"
        },
        "comment": "The new hit points for this unit.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "isDamaged()",
    "name": "isDamaged",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "True if under repair.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getTurnsForRepair()",
    "name": "getTurnsForRepair",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The number of turns left to be repaired.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getDestination()",
    "name": "getDestination",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.Location",
      "name": "Location",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The destination Location of this Unit.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "setDestination(net.sf.freecol.common.model.Location newDestination)",
    "name": "setDestination",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Location",
          "name": "Location",
          "isArray": false
        },
        "name": "newDestination"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Location",
            "name": "Location",
            "isArray": false
          },
          "name": "newDestination"
        },
        "comment": "The new destination Location.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "getTradeRoute()",
    "name": "getTradeRoute",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.TradeRoute",
      "name": "TradeRoute",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The TradeRoute, or null if none.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "setTradeRoute(net.sf.freecol.common.model.TradeRoute newTradeRoute)",
    "name": "setTradeRoute",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.TradeRoute",
          "name": "TradeRoute",
          "isArray": false
        },
        "name": "newTradeRoute"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.TradeRoute",
            "name": "TradeRoute",
            "isArray": false
          },
          "name": "newTradeRoute"
        },
        "comment": "The new TradeRoute value.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "getStop()",
    "name": "getStop",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.TradeRouteStop",
      "name": "TradeRouteStop",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The target Stop.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getCurrentStops()",
    "name": "getCurrentStops",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List",
      "name": "List",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The target Stop.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getCurrentStop()",
    "name": "getCurrentStop",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The current stop index.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "setCurrentStop(int currentStop)",
    "name": "setCurrentStop",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "currentStop"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "currentStop"
        },
        "comment": "A new value for the currentStop.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "validateCurrentStop()",
    "name": "validateCurrentStop",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The current stop index, or negative on failure.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "atStop(net.sf.freecol.common.model.TradeRouteStop stop)",
    "name": "atStop",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.TradeRouteStop",
          "name": "TradeRouteStop",
          "isArray": false
        },
        "name": "stop"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.TradeRouteStop",
            "name": "TradeRouteStop",
            "isArray": false
          },
          "name": "stop"
        },
        "comment": "The TradeRouteStop to check.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "True if the unit is at the given stop.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getTradeLocation()",
    "name": "getTradeLocation",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.TradeLocation",
      "name": "TradeLocation",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The TradeLocation for this unit.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getTreasureAmount()",
    "name": "getTreasureAmount",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The amount of treasure.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalStateException",
          "name": "IllegalStateException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if this is not a treasure carrying unit.",
        "kind": "THROWS",
        "condition": "(target.canCarryTreasure()) == false"
      }
    ]
  },
  {
    "signature": "setTreasureAmount(int amount)",
    "name": "setTreasureAmount",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "amount"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "amount"
        },
        "comment": "The new amount of treasure.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "getAttrition()",
    "name": "getAttrition",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The attrition of this unit.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "setAttrition(int attrition)",
    "name": "setAttrition",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "attrition"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "attrition"
        },
        "comment": "The new attrition of this unit.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "getVisibleGoodsCount()",
    "name": "getVisibleGoodsCount",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The visible amount of goods carried by this Unit.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getAutomaticRole()",
    "name": "getAutomaticRole",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.Role",
      "name": "Role",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "A Role that can be automatically assumed by this unit, or null if none.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "canCaptureEquipment(net.sf.freecol.common.model.Role role)",
    "name": "canCaptureEquipment",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.Role",
      "name": "Role",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Role",
          "name": "Role",
          "isArray": false
        },
        "name": "role"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Role",
            "name": "Role",
            "isArray": false
          },
          "name": "role"
        },
        "comment": "The loser unit Role.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "The Role available to this unit as a result of capturing the loser equipment.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "losingEquipmentKillsUnit()",
    "name": "losingEquipmentKillsUnit",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "True if the unit is doomed.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "losingEquipmentDemotesUnit()",
    "name": "losingEquipmentDemotesUnit",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "True if the unit is to be demoted.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isArmed()",
    "name": "isArmed",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "True if the unit has arms.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isMounted()",
    "name": "isMounted",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "True if the unit have a mount.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isBeached()",
    "name": "isBeached",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "True if the unit is a beached ship.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isBeached(net.sf.freecol.common.model.Tile tile)",
    "name": "isBeached",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Tile",
          "name": "Tile",
          "isArray": false
        },
        "name": "tile"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Tile",
            "name": "Tile",
            "isArray": false
          },
          "name": "tile"
        },
        "comment": "The Tile to check.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "True if the unit is a beached ship.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isDefensiveUnit()",
    "name": "isDefensiveUnit",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "True if this is a defensive unit meaning it can be used to defend a Colony. This would normally mean that a defensive unit also will be offensive.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isOffensiveUnit()",
    "name": "isOffensiveUnit",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "True if this is an offensive unit.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "betterDefender(net.sf.freecol.common.model.Unit defender,double defenderPower,net.sf.freecol.common.model.Unit other,double otherPower)",
    "name": "betterDefender",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Unit",
          "name": "Unit",
          "isArray": false
        },
        "name": "defender"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "defenderPower"
      },
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Unit",
          "name": "Unit",
          "isArray": false
        },
        "name": "other"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "otherPower"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Unit",
            "name": "Unit",
            "isArray": false
          },
          "name": "defender"
        },
        "comment": "The current defender Unit.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "defenderPower"
        },
        "comment": "Its defence power.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Unit",
            "name": "Unit",
            "isArray": false
          },
          "name": "other"
        },
        "comment": "An alternate Unit.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "otherPower"
        },
        "comment": "Its defence power.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "True if the other unit should be preferred.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getRepairLocation()",
    "name": "getRepairLocation",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.Location",
      "name": "Location",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The closest Location where a ship can be repaired.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getMoveCost(net.sf.freecol.common.model.Tile target)",
    "name": "getMoveCost",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Tile",
          "name": "Tile",
          "isArray": false
        },
        "name": "target"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Tile",
            "name": "Tile",
            "isArray": false
          },
          "name": "target"
        },
        "comment": "The Tile this Unit will move onto.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "The cost of moving this unit onto the given Tile.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getMoveCost(net.sf.freecol.common.model.Tile from,net.sf.freecol.common.model.Tile target,int ml)",
    "name": "getMoveCost",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Tile",
          "name": "Tile",
          "isArray": false
        },
        "name": "from"
      },
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Tile",
          "name": "Tile",
          "isArray": false
        },
        "name": "target"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "ml"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Tile",
            "name": "Tile",
            "isArray": false
          },
          "name": "from"
        },
        "comment": "The Tile this Unit will move from.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Tile",
            "name": "Tile",
            "isArray": false
          },
          "name": "target"
        },
        "comment": "The Tile this Unit will move onto.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "ml"
        },
        "comment": "The amount of moves this Unit has left.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "The cost of moving this unit onto the given Tile.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getMoveType(net.sf.freecol.common.model.Direction direction)",
    "name": "getMoveType",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.Unit.MoveType",
      "name": "MoveType",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Direction",
          "name": "Direction",
          "isArray": false
        },
        "name": "direction"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Direction",
            "name": "Direction",
            "isArray": false
          },
          "name": "direction"
        },
        "comment": "The Direction of the move.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "The move type.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getMoveType(net.sf.freecol.common.model.Tile target)",
    "name": "getMoveType",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.Unit.MoveType",
      "name": "MoveType",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Tile",
          "name": "Tile",
          "isArray": false
        },
        "name": "target"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Tile",
            "name": "Tile",
            "isArray": false
          },
          "name": "target"
        },
        "comment": "The target Tile of the move.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "The move type.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getMoveType(net.sf.freecol.common.model.Tile from,net.sf.freecol.common.model.Tile target,int ml)",
    "name": "getMoveType",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.Unit.MoveType",
      "name": "MoveType",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Tile",
          "name": "Tile",
          "isArray": false
        },
        "name": "from"
      },
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Tile",
          "name": "Tile",
          "isArray": false
        },
        "name": "target"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "ml"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Tile",
            "name": "Tile",
            "isArray": false
          },
          "name": "from"
        },
        "comment": "The origin Tile of the move.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Tile",
            "name": "Tile",
            "isArray": false
          },
          "name": "target"
        },
        "comment": "The target Tile of the move.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "ml"
        },
        "comment": "The amount of moves this unit has left.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "The move type.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getSimpleMoveType(net.sf.freecol.common.model.Tile from,net.sf.freecol.common.model.Tile target)",
    "name": "getSimpleMoveType",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.Unit.MoveType",
      "name": "MoveType",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Tile",
          "name": "Tile",
          "isArray": false
        },
        "name": "from"
      },
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Tile",
          "name": "Tile",
          "isArray": false
        },
        "name": "target"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Tile",
            "name": "Tile",
            "isArray": false
          },
          "name": "from"
        },
        "comment": "The origin Tile of the move.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Tile",
            "name": "Tile",
            "isArray": false
          },
          "name": "target"
        },
        "comment": "The target Tile of the move.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "The move type, which will be one of the extended illegal move types on failure.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getSimpleMoveType(net.sf.freecol.common.model.Tile target)",
    "name": "getSimpleMoveType",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.Unit.MoveType",
      "name": "MoveType",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Tile",
          "name": "Tile",
          "isArray": false
        },
        "name": "target"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Tile",
            "name": "Tile",
            "isArray": false
          },
          "name": "target"
        },
        "comment": "The target Tile of the move.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "The move type, which will be one of the extended illegal move types on failure.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getSimpleMoveType(net.sf.freecol.common.model.Direction direction)",
    "name": "getSimpleMoveType",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.Unit.MoveType",
      "name": "MoveType",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Direction",
          "name": "Direction",
          "isArray": false
        },
        "name": "direction"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Direction",
            "name": "Direction",
            "isArray": false
          },
          "name": "direction"
        },
        "comment": "The direction of the move.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "The move type.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isTileAccessible(net.sf.freecol.common.model.Tile tile)",
    "name": "isTileAccessible",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Tile",
          "name": "Tile",
          "isArray": false
        },
        "name": "tile"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Tile",
            "name": "Tile",
            "isArray": false
          },
          "name": "tile"
        },
        "comment": "The code Tile to check.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "True if some sort of legal move to the tile exists, including special cases where there is an interaction but the unit does not actually move, such as trade.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getInitialMovesLeft()",
    "name": "getInitialMovesLeft",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The amount of moves this unit has at the beginning of each turn.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getMovesAsString()",
    "name": "getMovesAsString",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "String",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "A movement label.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getSailTurns()",
    "name": "getSailTurns",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The number of turns to sail to/from Europe.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "canMoveToHighSeas()",
    "name": "canMoveToHighSeas",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "True if this unit can move immediately to the high seas.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "hasHighSeasMove()",
    "name": "hasHighSeasMove",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "True if the unit can either move immediately to the high seas or can make a move to a neighbouring high seas tile.",
      "kind": "RETURN",
      "condition": "target.canMoveToHighSeas() ? result==true:result==false"
    },
    "throwsTags": []
  },
  {
    "signature": "canBuildColony()",
    "name": "canBuildColony",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "true if this unit can build a colony.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isAtLocation(net.sf.freecol.common.model.Location loc)",
    "name": "isAtLocation",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Location",
          "name": "Location",
          "isArray": false
        },
        "name": "loc"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Location",
            "name": "Location",
            "isArray": false
          },
          "name": "loc"
        },
        "comment": "The Location to test.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "True if the locations are the same, or on the same tile.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getBestEntryTile(net.sf.freecol.common.model.Tile tile)",
    "name": "getBestEntryTile",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Tile",
          "name": "Tile",
          "isArray": false
        },
        "name": "tile"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Tile",
            "name": "Tile",
            "isArray": false
          },
          "name": "tile"
        },
        "comment": "The target Tile.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "The best entry location tile to arrive on the map at, or null if none found.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "resolveDestination()",
    "name": "resolveDestination",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.Location",
      "name": "Location",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The location the unit should appear next after leaving the high seas.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "couldMove()",
    "name": "couldMove",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "True if this unit could still be moved by the player.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getPathStartLocation()",
    "name": "getPathStartLocation",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.Location",
      "name": "Location",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "A suitable starting location, or null if none found.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "shouldTakeTransportTo(net.sf.freecol.common.model.Location loc)",
    "name": "shouldTakeTransportTo",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Location",
          "name": "Location",
          "isArray": false
        },
        "name": "loc"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Location",
            "name": "Location",
            "isArray": false
          },
          "name": "loc"
        },
        "comment": "The Location to go to.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "True if the unit should use transport.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getTrivialPath()",
    "name": "getTrivialPath",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.PathNode",
      "name": "PathNode",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "A path to the trivial target, or null if none found.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "findPath(net.sf.freecol.common.model.Location end)",
    "name": "findPath",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.PathNode",
      "name": "PathNode",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Location",
          "name": "Location",
          "isArray": false
        },
        "name": "end"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Location",
            "name": "Location",
            "isArray": false
          },
          "name": "end"
        },
        "comment": "The Location in which the path ends.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A PathNode from the current location to the end location, or null if none found.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "findPath(net.sf.freecol.common.model.Location start,net.sf.freecol.common.model.Location end,net.sf.freecol.common.model.Unit carrier,net.sf.freecol.common.model.pathfinding.CostDecider costDecider)",
    "name": "findPath",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.PathNode",
      "name": "PathNode",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Location",
          "name": "Location",
          "isArray": false
        },
        "name": "start"
      },
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Location",
          "name": "Location",
          "isArray": false
        },
        "name": "end"
      },
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Unit",
          "name": "Unit",
          "isArray": false
        },
        "name": "carrier"
      },
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.pathfinding.CostDecider",
          "name": "CostDecider",
          "isArray": false
        },
        "name": "costDecider"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Location",
            "name": "Location",
            "isArray": false
          },
          "name": "start"
        },
        "comment": "The Location to start at.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Location",
            "name": "Location",
            "isArray": false
          },
          "name": "end"
        },
        "comment": "The Location to end at.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Unit",
            "name": "Unit",
            "isArray": false
          },
          "name": "carrier"
        },
        "comment": "An optional carrier Unit to carry the unit.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.pathfinding.CostDecider",
            "name": "CostDecider",
            "isArray": false
          },
          "name": "costDecider"
        },
        "comment": "An optional CostDecider for determining the movement costs (uses default cost deciders for the unit/s if not provided).",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A PathNode, or null if no path is found.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "findPathToNeighbour(net.sf.freecol.common.model.Location start,net.sf.freecol.common.model.Tile end,net.sf.freecol.common.model.Unit carrier,net.sf.freecol.common.model.pathfinding.CostDecider costDecider)",
    "name": "findPathToNeighbour",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.PathNode",
      "name": "PathNode",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Location",
          "name": "Location",
          "isArray": false
        },
        "name": "start"
      },
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Tile",
          "name": "Tile",
          "isArray": false
        },
        "name": "end"
      },
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Unit",
          "name": "Unit",
          "isArray": false
        },
        "name": "carrier"
      },
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.pathfinding.CostDecider",
          "name": "CostDecider",
          "isArray": false
        },
        "name": "costDecider"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Location",
            "name": "Location",
            "isArray": false
          },
          "name": "start"
        },
        "comment": "The Location to start at.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Tile",
            "name": "Tile",
            "isArray": false
          },
          "name": "end"
        },
        "comment": "The Tile to end at a neighbour of.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Unit",
            "name": "Unit",
            "isArray": false
          },
          "name": "carrier"
        },
        "comment": "An optional carrier Unit to carry the unit.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.pathfinding.CostDecider",
            "name": "CostDecider",
            "isArray": false
          },
          "name": "costDecider"
        },
        "comment": "An optional CostDecider for determining the movement costs (uses default cost deciders for the unit/s if not provided).",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A PathNode, or null if no path is found.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getTurnsToReach(net.sf.freecol.common.model.Location end)",
    "name": "getTurnsToReach",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Location",
          "name": "Location",
          "isArray": false
        },
        "name": "end"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Location",
            "name": "Location",
            "isArray": false
          },
          "name": "end"
        },
        "comment": "The destination Location.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "The number of turns it will take to reach the destination, or MANY_TURNS if no path can be found.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getTurnsToReach(net.sf.freecol.common.model.Location start,net.sf.freecol.common.model.Location end)",
    "name": "getTurnsToReach",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Location",
          "name": "Location",
          "isArray": false
        },
        "name": "start"
      },
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Location",
          "name": "Location",
          "isArray": false
        },
        "name": "end"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Location",
            "name": "Location",
            "isArray": false
          },
          "name": "start"
        },
        "comment": "The Location to start the search from.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Location",
            "name": "Location",
            "isArray": false
          },
          "name": "end"
        },
        "comment": "The destination Location.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "The number of turns it will take to reach the end, or MANY_TURNS if no path can be found.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getTurnsToReach(net.sf.freecol.common.model.Location start,net.sf.freecol.common.model.Location end,net.sf.freecol.common.model.Unit carrier,net.sf.freecol.common.model.pathfinding.CostDecider costDecider)",
    "name": "getTurnsToReach",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Location",
          "name": "Location",
          "isArray": false
        },
        "name": "start"
      },
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Location",
          "name": "Location",
          "isArray": false
        },
        "name": "end"
      },
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Unit",
          "name": "Unit",
          "isArray": false
        },
        "name": "carrier"
      },
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.pathfinding.CostDecider",
          "name": "CostDecider",
          "isArray": false
        },
        "name": "costDecider"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Location",
            "name": "Location",
            "isArray": false
          },
          "name": "start"
        },
        "comment": "The Location to start the search from.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Location",
            "name": "Location",
            "isArray": false
          },
          "name": "end"
        },
        "comment": "The destination Location.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Unit",
            "name": "Unit",
            "isArray": false
          },
          "name": "carrier"
        },
        "comment": "An optional carrier Unit to use.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.pathfinding.CostDecider",
            "name": "CostDecider",
            "isArray": false
          },
          "name": "costDecider"
        },
        "comment": "An optional CostDecider to score the path with.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "The number of turns it will take to reach the end, or MANY_TURNS if no path can be found.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getClosestColony(java.util.List colonies)",
    "name": "getClosestColony",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.List",
          "name": "List",
          "isArray": false
        },
        "name": "colonies"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.List",
            "name": "List",
            "isArray": false
          },
          "name": "colonies"
        },
        "comment": "A list of Colonys.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "The nearest Colony, or null if none found.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getClosestColony(java.util.stream.Stream colonies)",
    "name": "getClosestColony",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.Colony",
      "name": "Colony",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.stream.Stream",
          "name": "Stream",
          "isArray": false
        },
        "name": "colonies"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.stream.Stream",
            "name": "Stream",
            "isArray": false
          },
          "name": "colonies"
        },
        "comment": "A stream of Colonys.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "The nearest Colony, or null if none found.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "findOurNearestSettlement(boolean excludeStart,int range,boolean coastal)",
    "name": "findOurNearestSettlement",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.PathNode",
      "name": "PathNode",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "excludeStart"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "range"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "coastal"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "excludeStart"
        },
        "comment": "If true, ignore any settlement the unit is currently in.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "range"
        },
        "comment": "An upper bound on the number of moves.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "coastal"
        },
        "comment": "If true, the settlement must have a path to Europe.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "The nearest matching settlement if any, otherwise null.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "findOurNearestSettlement(net.sf.freecol.common.model.Tile startTile,boolean excludeStart,int range,boolean coastal)",
    "name": "findOurNearestSettlement",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.PathNode",
      "name": "PathNode",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Tile",
          "name": "Tile",
          "isArray": false
        },
        "name": "startTile"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "excludeStart"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "range"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "coastal"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Tile",
            "name": "Tile",
            "isArray": false
          },
          "name": "startTile"
        },
        "comment": "The Tile to start searching from.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "excludeStart"
        },
        "comment": "If true, ignore any settlement the unit is currently in.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "range"
        },
        "comment": "An upper bound on the number of moves.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "coastal"
        },
        "comment": "If true, the settlement must have a path to Europe.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "The nearest matching settlement if any, otherwise null.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "findOurNearestSettlement()",
    "name": "findOurNearestSettlement",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.PathNode",
      "name": "PathNode",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "A path to the nearest settlement if any, otherwise null.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "findOurNearestPort()",
    "name": "findOurNearestPort",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.PathNode",
      "name": "PathNode",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "A path to the nearest settlement if any, otherwise null (for now including if in Europe or at sea).",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "findIntermediatePort(net.sf.freecol.common.model.Location dst)",
    "name": "findIntermediatePort",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.PathNode",
      "name": "PathNode",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Location",
          "name": "Location",
          "isArray": false
        },
        "name": "dst"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Location",
            "name": "Location",
            "isArray": false
          },
          "name": "dst"
        },
        "comment": "The destination Location.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A path to the port, or null if none found.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "findOurNearestOtherSettlement()",
    "name": "findOurNearestOtherSettlement",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.PathNode",
      "name": "PathNode",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The nearest settlement if any, otherwise null.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "search(net.sf.freecol.common.model.Location start,net.sf.freecol.common.model.pathfinding.GoalDecider gd,net.sf.freecol.common.model.pathfinding.CostDecider cd,int maxTurns,net.sf.freecol.common.model.Unit carrier)",
    "name": "search",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.PathNode",
      "name": "PathNode",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Location",
          "name": "Location",
          "isArray": false
        },
        "name": "start"
      },
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.pathfinding.GoalDecider",
          "name": "GoalDecider",
          "isArray": false
        },
        "name": "gd"
      },
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.pathfinding.CostDecider",
          "name": "CostDecider",
          "isArray": false
        },
        "name": "cd"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "maxTurns"
      },
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Unit",
          "name": "Unit",
          "isArray": false
        },
        "name": "carrier"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Location",
            "name": "Location",
            "isArray": false
          },
          "name": "start"
        },
        "comment": "The Location to start the search from.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.pathfinding.GoalDecider",
            "name": "GoalDecider",
            "isArray": false
          },
          "name": "gd"
        },
        "comment": "The object responsible for determining whether a given PathNode is a goal or not.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.pathfinding.CostDecider",
            "name": "CostDecider",
            "isArray": false
          },
          "name": "cd"
        },
        "comment": "An optional CostDecider responsible for determining the path cost.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "maxTurns"
        },
        "comment": "The maximum number of turns the given Unit is allowed to move. This is the maximum search range for a goal.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Unit",
            "name": "Unit",
            "isArray": false
          },
          "name": "carrier"
        },
        "comment": "An optional naval carrier Unit to use.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "The path to a goal, or null if none can be found.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "canAttack(net.sf.freecol.common.model.Unit defender)",
    "name": "canAttack",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Unit",
          "name": "Unit",
          "isArray": false
        },
        "name": "defender"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Unit",
            "name": "Unit",
            "isArray": false
          },
          "name": "defender"
        },
        "comment": "The defending Unit.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "True if this unit can attack.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "searchForDanger(int range,float threat)",
    "name": "searchForDanger",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.PathNode",
      "name": "PathNode",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "range"
      },
      {
        "type": {
          "qualifiedName": "float",
          "name": "float",
          "isArray": false
        },
        "name": "threat"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "range"
        },
        "comment": "The number of turns to search for a threat in.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "float",
            "name": "float",
            "isArray": false
          },
          "name": "threat"
        },
        "comment": "The maximum tolerable probability of a potentially threatening unit defeating this unit in combat.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A path to the threat, or null if not found.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isInDanger(int range,float threat)",
    "name": "isInDanger",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "range"
      },
      {
        "type": {
          "qualifiedName": "float",
          "name": "float",
          "isArray": false
        },
        "name": "threat"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "range"
        },
        "comment": "The number of turns to search for a threat within.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "float",
            "name": "float",
            "isArray": false
          },
          "name": "threat"
        },
        "comment": "The maximum tolerable probability of a potentially threatening unit defeating this unit in combat.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "True if a threat was found.",
      "kind": "RETURN",
      "condition": "target.searchForDanger(args[0], args[1])!=null ? result==true"
    },
    "throwsTags": []
  },
  {
    "signature": "getLineOfSight()",
    "name": "getLineOfSight",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The line of sight of this Unit.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getGoodsList()",
    "name": "getGoodsList",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List",
      "name": "List",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "A list of Goods.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getCompactGoodsList()",
    "name": "getCompactGoodsList",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List",
      "name": "List",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "A compact list of Goods.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "canCarryUnits()",
    "name": "canCarryUnits",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "True if the unit can carry units.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "couldCarry(net.sf.freecol.common.model.Unit u)",
    "name": "couldCarry",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Unit",
          "name": "Unit",
          "isArray": false
        },
        "name": "u"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Unit",
            "name": "Unit",
            "isArray": false
          },
          "name": "u"
        },
        "comment": "The potential cargo Unit.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "True if this unit can carry the cargo.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "canCarryGoods()",
    "name": "canCarryGoods",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "True if the unit can carry goods.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "couldCarry(net.sf.freecol.common.model.Goods g)",
    "name": "couldCarry",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Goods",
          "name": "Goods",
          "isArray": false
        },
        "name": "g"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Goods",
            "name": "Goods",
            "isArray": false
          },
          "name": "g"
        },
        "comment": "The potential cargo Goods.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "True if this unit can carry the cargo.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getSpaceLeft()",
    "name": "getSpaceLeft",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The number of free cargo slots on this unit.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "hasSpaceLeft()",
    "name": "hasSpaceLeft",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "True if there is free space.",
      "kind": "RETURN",
      "condition": "target.getSpaceLeft() > 0 ? result == true : result == false"
    },
    "throwsTags": []
  },
  {
    "signature": "getCargoCapacity()",
    "name": "getCargoCapacity",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The total space.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getGoodsSpaceTaken()",
    "name": "getGoodsSpaceTaken",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The number cargo slots occupied by goods.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getUnitSpaceTaken()",
    "name": "getUnitSpaceTaken",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The number of cargo slots occupied by units.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getCargoSpaceTaken()",
    "name": "getCargoSpaceTaken",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The number of occupied cargo slots.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "hasGoodsCargo()",
    "name": "hasGoodsCargo",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "True if the unit is carrying any goods cargo.",
      "kind": "RETURN",
      "condition": "target.getGoodsSpaceTaken() > 0 ? result == true : result == false"
    },
    "throwsTags": []
  },
  {
    "signature": "hasCargo()",
    "name": "hasCargo",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "True if the unit is carrying any cargo.",
      "kind": "RETURN",
      "condition": "target.getCargoSpaceTaken() > 0 ? result == true : result == false"
    },
    "throwsTags": []
  },
  {
    "signature": "getLoadableAmount(net.sf.freecol.common.model.GoodsType type)",
    "name": "getLoadableAmount",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.GoodsType",
          "name": "GoodsType",
          "isArray": false
        },
        "name": "type"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.GoodsType",
            "name": "GoodsType",
            "isArray": false
          },
          "name": "type"
        },
        "comment": "The GoodsType to examine.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "The amount of goods that could be loaded onto this unit.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getOccupationLabel(net.sf.freecol.common.model.Player player,boolean full)",
    "name": "getOccupationLabel",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.StringTemplate",
      "name": "StringTemplate",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Player",
          "name": "Player",
          "isArray": false
        },
        "name": "player"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "full"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Player",
            "name": "Player",
            "isArray": false
          },
          "name": "player"
        },
        "comment": "The Player viewing the unit, as the owner has access to more information.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "full"
        },
        "comment": "If true, return a more detailed result.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A StringTemplate for the unit occupation.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getConvertProbability()",
    "name": "getConvertProbability",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "float",
      "name": "float",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "A probability of conversion.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getBurnProbability()",
    "name": "getBurnProbability",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "float",
      "name": "float",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "A probability of burning missions.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getTypeChange(net.sf.freecol.common.model.UnitTypeChange.ChangeType change,net.sf.freecol.common.model.Player owner)",
    "name": "getTypeChange",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.UnitType",
      "name": "UnitType",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.UnitTypeChange.ChangeType",
          "name": "ChangeType",
          "isArray": false
        },
        "name": "change"
      },
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Player",
          "name": "Player",
          "isArray": false
        },
        "name": "owner"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.UnitTypeChange.ChangeType",
            "name": "ChangeType",
            "isArray": false
          },
          "name": "change"
        },
        "comment": "The ChangeType to consider.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Player",
            "name": "Player",
            "isArray": false
          },
          "name": "owner"
        },
        "comment": "The Player to own this unit after a change of type CAPTURE or UNDEAD.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "The resulting unit type or null if there is no change suitable.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "canCashInTreasureTrain()",
    "name": "canCashInTreasureTrain",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "true if the treasure train can be cashed in.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalStateException",
          "name": "IllegalStateException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if this unit is not a treasure train.",
        "kind": "THROWS",
        "condition": "(target.canCarryTreasure()) == false"
      }
    ]
  },
  {
    "signature": "canCashInTreasureTrain(net.sf.freecol.common.model.Location loc)",
    "name": "canCashInTreasureTrain",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Location",
          "name": "Location",
          "isArray": false
        },
        "name": "loc"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Location",
            "name": "Location",
            "isArray": false
          },
          "name": "loc"
        },
        "comment": "The Location.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if the treasure train can be cashed in.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalStateException",
          "name": "IllegalStateException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if this unit is not a treasure train.",
        "kind": "THROWS",
        "condition": "(target.canCarryTreasure())==false"
      }
    ]
  },
  {
    "signature": "getTransportFee()",
    "name": "getTransportFee",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The fee required for transport.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getSkillLevel()",
    "name": "getSkillLevel",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The level of skill for this unit. A higher value signals a more advanced type of units.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getSkillLevel(net.sf.freecol.common.model.UnitType unitType)",
    "name": "getSkillLevel",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.UnitType",
          "name": "UnitType",
          "isArray": false
        },
        "name": "unitType"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.UnitType",
            "name": "UnitType",
            "isArray": false
          },
          "name": "unitType"
        },
        "comment": "The type of Unit.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "The level of skill for the given unit. A higher value signals a more advanced type of units.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getMissionaryTradeModifiers(boolean sense)",
    "name": "getMissionaryTradeModifiers",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Set",
      "name": "Set",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "sense"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "sense"
        },
        "comment": "The sense to apply the modifiers.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "The missionary trade bonuses.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "addFeature(net.sf.freecol.common.model.Feature feature)",
    "name": "addFeature",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Feature",
          "name": "Feature",
          "isArray": false
        },
        "name": "feature"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Feature",
            "name": "Feature",
            "isArray": false
          },
          "name": "feature"
        },
        "comment": "The Feature to add.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "getProductionInfo(java.util.List input)",
    "name": "getProductionInfo",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.ProductionInfo",
      "name": "ProductionInfo",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.List",
          "name": "List",
          "isArray": false
        },
        "name": "input"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.List",
            "name": "List",
            "isArray": false
          },
          "name": "input"
        },
        "comment": "A list of input AbstractGoods.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "The ProductionInfo for this unit.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getPioneerScore()",
    "name": "getPioneerScore",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "A pioneering score.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getScoutScore()",
    "name": "getScoutScore",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "A scouting score.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "evaluateFor(net.sf.freecol.common.model.Player player)",
    "name": "evaluateFor",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Player",
          "name": "Player",
          "isArray": false
        },
        "name": "player"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Player",
            "name": "Player",
            "isArray": false
          },
          "name": "player"
        },
        "comment": "The Player to evaluate for.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A value of this unit.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getCombatModifiers(java.lang.String id,net.sf.freecol.common.model.FreeColGameObjectType fcgot,net.sf.freecol.common.model.Turn turn)",
    "name": "getCombatModifiers",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Set",
      "name": "Set",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "id"
      },
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.FreeColGameObjectType",
          "name": "FreeColGameObjectType",
          "isArray": false
        },
        "name": "fcgot"
      },
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Turn",
          "name": "Turn",
          "isArray": false
        },
        "name": "turn"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getNeighbourTile(java.lang.String directionString)",
    "name": "getNeighbourTile",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "directionString"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "directionString"
        },
        "comment": "The direction.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "The Tile in the given direction.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalStateException",
          "name": "IllegalStateException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if there is trouble.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "getAdjacentSettlementSafely(java.lang.String settlementId)",
    "name": "getAdjacentSettlementSafely",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.Settlement",
      "name": "Settlement",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "settlementId"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "settlementId"
        },
        "comment": "The identifier of the Settlement to be found.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "The settlement corresponding to the settlementId argument.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalStateException",
          "name": "IllegalStateException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "on failure to validate the settlementId in any way.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "getAdjacentIndianSettlementSafely(java.lang.String id)",
    "name": "getAdjacentIndianSettlementSafely",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.IndianSettlement",
      "name": "IndianSettlement",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "id"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "id"
        },
        "comment": "The identifier of the IndianSettlement to be found.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "The settlement corresponding to the settlementId argument.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalStateException",
          "name": "IllegalStateException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "on failure to validate the settlementId in any way.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "getConsumedGoods()",
    "name": "getConsumedGoods",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List",
      "name": "List",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getPriority()",
    "name": "getPriority",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getOwner()",
    "name": "getOwner",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.Player",
      "name": "Player",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "setOwner(net.sf.freecol.common.model.Player player)",
    "name": "setOwner",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Player",
          "name": "Player",
          "isArray": false
        },
        "name": "player"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getLocation()",
    "name": "getLocation",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.Location",
      "name": "Location",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "The location of this Unit.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "setLocation(net.sf.freecol.common.model.Location newLocation)",
    "name": "setLocation",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Location",
          "name": "Location",
          "isArray": false
        },
        "name": "newLocation"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "net.sf.freecol.common.model.Location",
            "name": "Location",
            "isArray": false
          },
          "name": "newLocation"
        },
        "comment": "The new Location.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "True if the location change succeeds.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isInEurope()",
    "name": "isInEurope",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "True if in Europe.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getTile()",
    "name": "getTile",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.Tile",
      "name": "Tile",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getLocationLabel()",
    "name": "getLocationLabel",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.StringTemplate",
      "name": "StringTemplate",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "add(net.sf.freecol.common.model.Locatable locatable)",
    "name": "add",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Locatable",
          "name": "Locatable",
          "isArray": false
        },
        "name": "locatable"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "remove(net.sf.freecol.common.model.Locatable locatable)",
    "name": "remove",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Locatable",
          "name": "Locatable",
          "isArray": false
        },
        "name": "locatable"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getSettlement()",
    "name": "getSettlement",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.Settlement",
      "name": "Settlement",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "up()",
    "name": "up",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.Location",
      "name": "Location",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getRank()",
    "name": "getRank",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "toShortString()",
    "name": "toShortString",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "String",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getSpaceTaken()",
    "name": "getSpaceTaken",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getNoAddReason(net.sf.freecol.common.model.Locatable locatable)",
    "name": "getNoAddReason",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.UnitLocation.NoAddReason",
      "name": "NoAddReason",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Locatable",
          "name": "Locatable",
          "isArray": false
        },
        "name": "locatable"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getGoodsCapacity()",
    "name": "getGoodsCapacity",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "disposeResources()",
    "name": "disposeResources",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getLinkTarget(net.sf.freecol.common.model.Player player)",
    "name": "getLinkTarget",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "net.sf.freecol.common.model.FreeColGameObject",
      "name": "FreeColGameObject",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Player",
          "name": "Player",
          "isArray": false
        },
        "name": "player"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "checkIntegrity(boolean fix)",
    "name": "checkIntegrity",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "fix"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getAbilities(java.lang.String id,net.sf.freecol.common.model.FreeColGameObjectType fcgot,net.sf.freecol.common.model.Turn turn)",
    "name": "getAbilities",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Set",
      "name": "Set",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "id"
      },
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.FreeColGameObjectType",
          "name": "FreeColGameObjectType",
          "isArray": false
        },
        "name": "fcgot"
      },
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Turn",
          "name": "Turn",
          "isArray": false
        },
        "name": "turn"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getModifiers(java.lang.String id,net.sf.freecol.common.model.FreeColGameObjectType fcgot,net.sf.freecol.common.model.Turn turn)",
    "name": "getModifiers",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Set",
      "name": "Set",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "id"
      },
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.FreeColGameObjectType",
          "name": "FreeColGameObjectType",
          "isArray": false
        },
        "name": "fcgot"
      },
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.model.Turn",
          "name": "Turn",
          "isArray": false
        },
        "name": "turn"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "writeAttributes(net.sf.freecol.common.io.FreeColXMLWriter xw)",
    "name": "writeAttributes",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.io.FreeColXMLWriter",
          "name": "FreeColXMLWriter",
          "isArray": false
        },
        "name": "xw"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "writeChildren(net.sf.freecol.common.io.FreeColXMLWriter xw)",
    "name": "writeChildren",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.io.FreeColXMLWriter",
          "name": "FreeColXMLWriter",
          "isArray": false
        },
        "name": "xw"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "readAttributes(net.sf.freecol.common.io.FreeColXMLReader xr)",
    "name": "readAttributes",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.io.FreeColXMLReader",
          "name": "FreeColXMLReader",
          "isArray": false
        },
        "name": "xr"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "readChildren(net.sf.freecol.common.io.FreeColXMLReader xr)",
    "name": "readChildren",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.io.FreeColXMLReader",
          "name": "FreeColXMLReader",
          "isArray": false
        },
        "name": "xr"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "readChild(net.sf.freecol.common.io.FreeColXMLReader xr)",
    "name": "readChild",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "net.sf.freecol.common.io.FreeColXMLReader",
          "name": "FreeColXMLReader",
          "isArray": false
        },
        "name": "xr"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "toString(java.lang.String prefix)",
    "name": "toString",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "prefix"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "prefix"
        },
        "comment": "A prefix (e.g. \"AIUnit\")",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A string representation of this Unit.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "toString()",
    "name": "toString",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "String",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getXMLTagName()",
    "name": "getXMLTagName",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "String",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getXMLElementTagName()",
    "name": "getXMLElementTagName",
    "containingClass": {
      "qualifiedName": "net.sf.freecol.common.model.Unit",
      "name": "Unit",
      "isArray": false
    },
    "targetClass": "net.sf.freecol.common.model.Unit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "String",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "\"unit\"",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  }
]
