[
  {
    "containingClass": {
      "isArray": false,
      "name": "Verify",
      "qualifiedName": "com.google.common.base.Verify"
    },
    "isVarArgs": false,
    "name": "Verify",
    "paramTags": [],
    "parameters": [],
    "signature": "Verify()",
    "targetClass": "com.google.common.base.Verify",
    "throwsTags": []
  },
  {
    "containingClass": {
      "isArray": false,
      "name": "Verify",
      "qualifiedName": "com.google.common.base.Verify"
    },
    "isVarArgs": false,
    "name": "verify",
    "paramTags": [],
    "parameters": [
      {
        "name": "expression",
        "type": {
          "isArray": false,
          "name": "boolean",
          "qualifiedName": "boolean"
        }
      }
    ],
    "returnType": {
      "isArray": false,
      "name": "void",
      "qualifiedName": "void"
    },
    "signature": "verify(boolean expression)",
    "targetClass": "com.google.common.base.Verify",
    "throwsTags": [
      {
        "comment": "if expression is false",
        "condition": "args[0]==false",
        "exception": {
          "isArray": false,
          "name": "VerifyException",
          "qualifiedName": "com.google.common.base.VerifyException"
        },
        "kind": "@throws"
      }
    ]
  },
  {
    "containingClass": {
      "isArray": false,
      "name": "Verify",
      "qualifiedName": "com.google.common.base.Verify"
    },
    "isVarArgs": true,
    "name": "verify",
    "paramTags": [
      {
        "comment": "a boolean expression",
        "condition": "",
        "kind": "@param",
        "parameter": {
          "name": "expression",
          "type": {
            "isArray": false,
            "name": "boolean",
            "qualifiedName": "boolean"
          }
        }
      },
      {
        "comment": "a template for the exception message should the check fail. The message is formed by replacing each %s placeholder in the template with an argument. These are matched by position - the first %s gets errorMessageArgs[0], etc. Unmatched arguments will be appended to the formatted message in square braces. Unmatched placeholders will be left as-is.",
        "condition": "",
        "kind": "@param",
        "parameter": {
          "name": "errorMessageTemplate",
          "type": {
            "isArray": false,
            "name": "String",
            "qualifiedName": "java.lang.String"
          }
        }
      },
      {
        "comment": "the arguments to be substituted into the message template. Arguments are converted to strings using String.valueOf(Object).",
        "condition": "",
        "kind": "@param",
        "parameter": {
          "name": "errorMessageArgs",
          "type": {
            "componentType": {
              "isArray": false,
              "name": "Object",
              "qualifiedName": "java.lang.Object"
            },
            "isArray": true,
            "name": "Object[]",
            "qualifiedName": "java.lang.Object[]"
          }
        }
      }
    ],
    "parameters": [
      {
        "name": "expression",
        "type": {
          "isArray": false,
          "name": "boolean",
          "qualifiedName": "boolean"
        }
      },
      {
        "name": "errorMessageTemplate",
        "nullable": true,
        "type": {
          "isArray": false,
          "name": "String",
          "qualifiedName": "java.lang.String"
        }
      },
      {
        "name": "errorMessageArgs",
        "nullable": true,
        "type": {
          "componentType": {
            "isArray": false,
            "name": "Object",
            "qualifiedName": "java.lang.Object"
          },
          "isArray": true,
          "name": "Object[]",
          "qualifiedName": "java.lang.Object[]"
        }
      }
    ],
    "returnType": {
      "isArray": false,
      "name": "void",
      "qualifiedName": "void"
    },
    "signature": "verify(boolean expression,java.lang.String errorMessageTemplate,java.lang.Object[] errorMessageArgs)",
    "targetClass": "com.google.common.base.Verify",
    "throwsTags": [
      {
        "comment": "if expression is false",
        "condition": "args[0]==false",
        "exception": {
          "isArray": false,
          "name": "VerifyException",
          "qualifiedName": "com.google.common.base.VerifyException"
        },
        "kind": "@throws"
      }
    ]
  },
  {
    "containingClass": {
      "isArray": false,
      "name": "Verify",
      "qualifiedName": "com.google.common.base.Verify"
    },
    "isVarArgs": false,
    "name": "verifyNotNull",
    "paramTags": [],
    "parameters": [
      {
        "name": "reference",
        "nullable": true,
        "type": {
          "isArray": false,
          "name": "Object",
          "qualifiedName": "java.lang.Object"
        }
      }
    ],
    "returnTag": {
      "comment": "reference, guaranteed to be non-null, for convenience",
      "condition": "true ? result!=null",
      "kind": "RETURN"
    },
    "returnType": {
      "isArray": false,
      "name": "T",
      "qualifiedName": "T"
    },
    "signature": "verifyNotNull(java.lang.Object reference)",
    "targetClass": "com.google.common.base.Verify",
    "throwsTags": [
      {
        "comment": "if reference is null",
        "condition": "args[0]==null",
        "exception": {
          "isArray": false,
          "name": "VerifyException",
          "qualifiedName": "com.google.common.base.VerifyException"
        },
        "kind": "@throws"
      }
    ]
  },
  {
    "containingClass": {
      "isArray": false,
      "name": "Verify",
      "qualifiedName": "com.google.common.base.Verify"
    },
    "isVarArgs": true,
    "name": "verifyNotNull",
    "paramTags": [
      {
        "comment": "a template for the exception message should the check fail. The message is formed by replacing each %s placeholder in the template with an argument. These are matched by position - the first %s gets errorMessageArgs[0], etc. Unmatched arguments will be appended to the formatted message in square braces. Unmatched placeholders will be left as-is.",
        "condition": "",
        "kind": "@param",
        "parameter": {
          "name": "errorMessageTemplate",
          "type": {
            "isArray": false,
            "name": "String",
            "qualifiedName": "java.lang.String"
          }
        }
      },
      {
        "comment": "the arguments to be substituted into the message template. Arguments are converted to strings using String.valueOf(Object).",
        "condition": "",
        "kind": "@param",
        "parameter": {
          "name": "errorMessageArgs",
          "type": {
            "componentType": {
              "isArray": false,
              "name": "Object",
              "qualifiedName": "java.lang.Object"
            },
            "isArray": true,
            "name": "Object[]",
            "qualifiedName": "java.lang.Object[]"
          }
        }
      }
    ],
    "parameters": [
      {
        "name": "reference",
        "nullable": true,
        "type": {
          "isArray": false,
          "name": "Object",
          "qualifiedName": "java.lang.Object"
        }
      },
      {
        "name": "errorMessageTemplate",
        "nullable": true,
        "type": {
          "isArray": false,
          "name": "String",
          "qualifiedName": "java.lang.String"
        }
      },
      {
        "name": "errorMessageArgs",
        "nullable": true,
        "type": {
          "componentType": {
            "isArray": false,
            "name": "Object",
            "qualifiedName": "java.lang.Object"
          },
          "isArray": true,
          "name": "Object[]",
          "qualifiedName": "java.lang.Object[]"
        }
      }
    ],
    "returnTag": {
      "comment": "reference, guaranteed to be non-null, for convenience",
      "condition": "true ? result!=null",
      "kind": "RETURN"
    },
    "returnType": {
      "isArray": false,
      "name": "T",
      "qualifiedName": "T"
    },
    "signature": "verifyNotNull(java.lang.Object reference,java.lang.String errorMessageTemplate,java.lang.Object[] errorMessageArgs)",
    "targetClass": "com.google.common.base.Verify",
    "throwsTags": [
      {
        "comment": "if reference is null",
        "condition": "args[0]==null",
        "exception": {
          "isArray": false,
          "name": "VerifyException",
          "qualifiedName": "com.google.common.base.VerifyException"
        },
        "kind": "@throws"
      }
    ]
  }
]
