[
  {
    "containingClass": {
      "isArray": false,
      "name": "Strings",
      "qualifiedName": "com.google.common.base.Strings"
    },
    "isVarArgs": false,
    "name": "Strings",
    "paramTags": [],
    "parameters": [],
    "signature": "Strings()",
    "targetClass": "com.google.common.base.Strings",
    "throwsTags": []
  },
  {
    "containingClass": {
      "isArray": false,
      "name": "Strings",
      "qualifiedName": "com.google.common.base.Strings"
    },
    "isVarArgs": false,
    "name": "nullToEmpty",
    "paramTags": [
      {
        "comment": "the string to test and possibly return",
        "condition": "",
        "kind": "@param",
        "parameter": {
          "name": "string",
          "type": {
            "isArray": false,
            "name": "String",
            "qualifiedName": "java.lang.String"
          }
        }
      }
    ],
    "parameters": [
      {
        "name": "string",
        "nullable": true,
        "type": {
          "isArray": false,
          "name": "String",
          "qualifiedName": "java.lang.String"
        }
      }
    ],
    "returnTag": {
      "comment": "string itself if it is non-null; \"\" if it is null",
      "condition": "",
      "kind": "RETURN"
    },
    "returnType": {
      "isArray": false,
      "name": "String",
      "qualifiedName": "java.lang.String"
    },
    "signature": "nullToEmpty(java.lang.String string)",
    "targetClass": "com.google.common.base.Strings",
    "throwsTags": []
  },
  {
    "containingClass": {
      "isArray": false,
      "name": "Strings",
      "qualifiedName": "com.google.common.base.Strings"
    },
    "isVarArgs": false,
    "name": "emptyToNull",
    "paramTags": [
      {
        "comment": "the string to test and possibly return",
        "condition": "",
        "kind": "@param",
        "parameter": {
          "name": "string",
          "type": {
            "isArray": false,
            "name": "String",
            "qualifiedName": "java.lang.String"
          }
        }
      }
    ],
    "parameters": [
      {
        "name": "string",
        "nullable": true,
        "type": {
          "isArray": false,
          "name": "String",
          "qualifiedName": "java.lang.String"
        }
      }
    ],
    "returnTag": {
      "comment": "string itself if it is nonempty; null if it is empty or null",
      "condition": "",
      "kind": "RETURN"
    },
    "returnType": {
      "isArray": false,
      "name": "String",
      "qualifiedName": "java.lang.String"
    },
    "signature": "emptyToNull(java.lang.String string)",
    "targetClass": "com.google.common.base.Strings",
    "throwsTags": []
  },
  {
    "containingClass": {
      "isArray": false,
      "name": "Strings",
      "qualifiedName": "com.google.common.base.Strings"
    },
    "isVarArgs": false,
    "name": "isNullOrEmpty",
    "paramTags": [
      {
        "comment": "a string reference to check",
        "condition": "",
        "kind": "@param",
        "parameter": {
          "name": "string",
          "type": {
            "isArray": false,
            "name": "String",
            "qualifiedName": "java.lang.String"
          }
        }
      }
    ],
    "parameters": [
      {
        "name": "string",
        "nullable": true,
        "type": {
          "isArray": false,
          "name": "String",
          "qualifiedName": "java.lang.String"
        }
      }
    ],
    "returnTag": {
      "comment": "true if the string is null or is the empty string",
      "condition": "args[0]==null || args[0].isEmpty() ? result == true",
      "kind": "RETURN"
    },
    "returnType": {
      "isArray": false,
      "name": "boolean",
      "qualifiedName": "boolean"
    },
    "signature": "isNullOrEmpty(java.lang.String string)",
    "targetClass": "com.google.common.base.Strings",
    "throwsTags": []
  },
  {
    "containingClass": {
      "isArray": false,
      "name": "Strings",
      "qualifiedName": "com.google.common.base.Strings"
    },
    "isVarArgs": false,
    "name": "padStart",
    "paramTags": [
      {
        "comment": "the string which should appear at the end of the result",
        "condition": "",
        "kind": "@param",
        "parameter": {
          "name": "string",
          "type": {
            "isArray": false,
            "name": "String",
            "qualifiedName": "java.lang.String"
          }
        }
      },
      {
        "comment": "the minimum length the resulting string must have. Can be zero or negative, in which case the input string is always returned.",
        "condition": "",
        "kind": "@param",
        "parameter": {
          "name": "minLength",
          "type": {
            "isArray": false,
            "name": "int",
            "qualifiedName": "int"
          }
        }
      },
      {
        "comment": "the character to insert at the beginning of the result until the minimum length is reached",
        "condition": "",
        "kind": "@param",
        "parameter": {
          "name": "padChar",
          "type": {
            "isArray": false,
            "name": "char",
            "qualifiedName": "char"
          }
        }
      }
    ],
    "parameters": [
      {
        "name": "string",
        "type": {
          "isArray": false,
          "name": "String",
          "qualifiedName": "java.lang.String"
        }
      },
      {
        "name": "minLength",
        "type": {
          "isArray": false,
          "name": "int",
          "qualifiedName": "int"
        }
      },
      {
        "name": "padChar",
        "type": {
          "isArray": false,
          "name": "char",
          "qualifiedName": "char"
        }
      }
    ],
    "returnTag": {
      "comment": "the padded string",
      "condition": "",
      "kind": "RETURN"
    },
    "returnType": {
      "isArray": false,
      "name": "String",
      "qualifiedName": "java.lang.String"
    },
    "signature": "padStart(java.lang.String string,int minLength,char padChar)",
    "targetClass": "com.google.common.base.Strings",
    "throwsTags": []
  },
  {
    "containingClass": {
      "isArray": false,
      "name": "Strings",
      "qualifiedName": "com.google.common.base.Strings"
    },
    "isVarArgs": false,
    "name": "padEnd",
    "paramTags": [
      {
        "comment": "the string which should appear at the beginning of the result",
        "condition": "",
        "kind": "@param",
        "parameter": {
          "name": "string",
          "type": {
            "isArray": false,
            "name": "String",
            "qualifiedName": "java.lang.String"
          }
        }
      },
      {
        "comment": "the minimum length the resulting string must have. Can be zero or negative, in which case the input string is always returned.",
        "condition": "",
        "kind": "@param",
        "parameter": {
          "name": "minLength",
          "type": {
            "isArray": false,
            "name": "int",
            "qualifiedName": "int"
          }
        }
      },
      {
        "comment": "the character to append to the end of the result until the minimum length is reached",
        "condition": "",
        "kind": "@param",
        "parameter": {
          "name": "padChar",
          "type": {
            "isArray": false,
            "name": "char",
            "qualifiedName": "char"
          }
        }
      }
    ],
    "parameters": [
      {
        "name": "string",
        "type": {
          "isArray": false,
          "name": "String",
          "qualifiedName": "java.lang.String"
        }
      },
      {
        "name": "minLength",
        "type": {
          "isArray": false,
          "name": "int",
          "qualifiedName": "int"
        }
      },
      {
        "name": "padChar",
        "type": {
          "isArray": false,
          "name": "char",
          "qualifiedName": "char"
        }
      }
    ],
    "returnTag": {
      "comment": "the padded string",
      "condition": "",
      "kind": "RETURN"
    },
    "returnType": {
      "isArray": false,
      "name": "String",
      "qualifiedName": "java.lang.String"
    },
    "signature": "padEnd(java.lang.String string,int minLength,char padChar)",
    "targetClass": "com.google.common.base.Strings",
    "throwsTags": []
  },
  {
    "containingClass": {
      "isArray": false,
      "name": "Strings",
      "qualifiedName": "com.google.common.base.Strings"
    },
    "isVarArgs": false,
    "name": "repeat",
    "paramTags": [
      {
        "comment": "any non-null string",
        "condition": "(args[0]==null) == false",
        "kind": "@param",
        "parameter": {
          "name": "string",
          "type": {
            "isArray": false,
            "name": "String",
            "qualifiedName": "java.lang.String"
          }
        }
      },
      {
        "comment": "the number of times to repeat it; a nonnegative integer",
        "condition": "(args[1]<0) == false",
        "kind": "@param",
        "parameter": {
          "name": "count",
          "type": {
            "isArray": false,
            "name": "int",
            "qualifiedName": "int"
          }
        }
      }
    ],
    "parameters": [
      {
        "name": "string",
        "type": {
          "isArray": false,
          "name": "String",
          "qualifiedName": "java.lang.String"
        }
      },
      {
        "name": "count",
        "type": {
          "isArray": false,
          "name": "int",
          "qualifiedName": "int"
        }
      }
    ],
    "returnTag": {
      "comment": "a string containing string repeated count times (the empty string if count is zero)",
      "condition": "",
      "kind": "RETURN"
    },
    "returnType": {
      "isArray": false,
      "name": "String",
      "qualifiedName": "java.lang.String"
    },
    "signature": "repeat(java.lang.String string,int count)",
    "targetClass": "com.google.common.base.Strings",
    "throwsTags": [
      {
        "comment": "if count is negative",
        "condition": "args[1]<0",
        "exception": {
          "isArray": false,
          "name": "IllegalArgumentException",
          "qualifiedName": "java.lang.IllegalArgumentException"
        },
        "kind": "@throws"
      }
    ]
  },
  {
    "containingClass": {
      "isArray": false,
      "name": "Strings",
      "qualifiedName": "com.google.common.base.Strings"
    },
    "isVarArgs": false,
    "name": "commonPrefix",
    "paramTags": [],
    "parameters": [
      {
        "name": "a",
        "type": {
          "isArray": false,
          "name": "CharSequence",
          "qualifiedName": "java.lang.CharSequence"
        }
      },
      {
        "name": "b",
        "type": {
          "isArray": false,
          "name": "CharSequence",
          "qualifiedName": "java.lang.CharSequence"
        }
      }
    ],
    "returnType": {
      "isArray": false,
      "name": "String",
      "qualifiedName": "java.lang.String"
    },
    "signature": "commonPrefix(java.lang.CharSequence a,java.lang.CharSequence b)",
    "targetClass": "com.google.common.base.Strings",
    "throwsTags": []
  },
  {
    "containingClass": {
      "isArray": false,
      "name": "Strings",
      "qualifiedName": "com.google.common.base.Strings"
    },
    "isVarArgs": false,
    "name": "commonSuffix",
    "paramTags": [],
    "parameters": [
      {
        "name": "a",
        "type": {
          "isArray": false,
          "name": "CharSequence",
          "qualifiedName": "java.lang.CharSequence"
        }
      },
      {
        "name": "b",
        "type": {
          "isArray": false,
          "name": "CharSequence",
          "qualifiedName": "java.lang.CharSequence"
        }
      }
    ],
    "returnType": {
      "isArray": false,
      "name": "String",
      "qualifiedName": "java.lang.String"
    },
    "signature": "commonSuffix(java.lang.CharSequence a,java.lang.CharSequence b)",
    "targetClass": "com.google.common.base.Strings",
    "throwsTags": []
  },
  {
    "containingClass": {
      "isArray": false,
      "name": "Strings",
      "qualifiedName": "com.google.common.base.Strings"
    },
    "isVarArgs": false,
    "name": "validSurrogatePairAt",
    "paramTags": [],
    "parameters": [
      {
        "name": "string",
        "type": {
          "isArray": false,
          "name": "CharSequence",
          "qualifiedName": "java.lang.CharSequence"
        }
      },
      {
        "name": "index",
        "type": {
          "isArray": false,
          "name": "int",
          "qualifiedName": "int"
        }
      }
    ],
    "returnType": {
      "isArray": false,
      "name": "boolean",
      "qualifiedName": "boolean"
    },
    "signature": "validSurrogatePairAt(java.lang.CharSequence string,int index)",
    "targetClass": "com.google.common.base.Strings",
    "throwsTags": []
  }
]
