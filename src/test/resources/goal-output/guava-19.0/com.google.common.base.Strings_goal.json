[
  {
    "signature": "nullToEmpty(java.lang.String string)",
    "name": "nullToEmpty",
    "containingClass": {
      "qualifiedName": "com.google.common.base.Strings",
      "name": "Strings",
      "isArray": false
    },
    "targetClass": "com.google.common.base.Strings",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "string",
        "nullable": true
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "string",
          "nullable": true
        },
        "comment": "the string to test and possibly return",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "string itself if it is non-null; \"\" if it is null",
      "kind": "RETURN",
      "condition": "args[0]!=null ? result.equals(args[0]) : result.equals(\"\") "
    },
    "throwsTags": []
  },
  {
    "signature": "emptyToNull(java.lang.String string)",
    "name": "emptyToNull",
    "containingClass": {
      "qualifiedName": "com.google.common.base.Strings",
      "name": "Strings",
      "isArray": false
    },
    "targetClass": "com.google.common.base.Strings",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "string",
        "nullable": true
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "string",
          "nullable": true
        },
        "comment": "the string to test and possibly return",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "string itself if it is nonempty; null if it is empty or null",
      "kind": "RETURN",
      "condition": "args[0]==null || args[0].isEmpty() ? result==null : result.equals(args[0])"
    },
    "throwsTags": []
  },
  {
    "signature": "isNullOrEmpty(java.lang.String string)",
    "name": "isNullOrEmpty",
    "containingClass": {
      "qualifiedName": "com.google.common.base.Strings",
      "name": "Strings",
      "isArray": false
    },
    "targetClass": "com.google.common.base.Strings",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "string",
        "nullable": true
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "string",
          "nullable": true
        },
        "comment": "a string reference to check",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if the string is null or is the empty string",
      "kind": "RETURN",
      "condition": "args[0]==null || args[0].isEmpty() ? result==true"
    },
    "throwsTags": []
  },
  {
    "signature": "padStart(java.lang.String string,int minLength,char padChar)",
    "name": "padStart",
    "containingClass": {
      "qualifiedName": "com.google.common.base.Strings",
      "name": "Strings",
      "isArray": false
    },
    "targetClass": "com.google.common.base.Strings",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "string"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "minLength"
      },
      {
        "type": {
          "qualifiedName": "char",
          "name": "char",
          "isArray": false
        },
        "name": "padChar"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "string"
        },
        "comment": "the string which should appear at the end of the result",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "minLength"
        },
        "comment": "the minimum length the resulting string must have. Can be zero or negative, in which case the input string is always returned.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "char",
            "name": "char",
            "isArray": false
          },
          "name": "padChar"
        },
        "comment": "the character to insert at the beginning of the result until the minimum length is reached",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the padded string",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "padEnd(java.lang.String string,int minLength,char padChar)",
    "name": "padEnd",
    "containingClass": {
      "qualifiedName": "com.google.common.base.Strings",
      "name": "Strings",
      "isArray": false
    },
    "targetClass": "com.google.common.base.Strings",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "string"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "minLength"
      },
      {
        "type": {
          "qualifiedName": "char",
          "name": "char",
          "isArray": false
        },
        "name": "padChar"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "string"
        },
        "comment": "the string which should appear at the beginning of the result",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "minLength"
        },
        "comment": "the minimum length the resulting string must have. Can be zero or negative, in which case the input string is always returned.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "char",
            "name": "char",
            "isArray": false
          },
          "name": "padChar"
        },
        "comment": "the character to append to the end of the result until the minimum length is reached",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the padded string",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "repeat(java.lang.String string,int count)",
    "name": "repeat",
    "containingClass": {
      "qualifiedName": "com.google.common.base.Strings",
      "name": "Strings",
      "isArray": false
    },
    "targetClass": "com.google.common.base.Strings",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "string"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "count"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "string"
        },
        "comment": "any non-null string",
        "kind": "PARAM",
        "condition": "args[0]!=null"
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "count"
        },
        "comment": "the number of times to repeat it; a nonnegative integer",
        "kind": "PARAM",
        "condition": "(args[1]<0) == false"
      }
    ],
    "returnTag": {
      "comment": "a string containing string repeated count times (the empty string if count is zero)",
      "kind": "RETURN",
      "condition": "args[1]==0 ? result.equals(\"\")"
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [
          "count"
        ],
        "comment": "if count is negative",
        "kind": "THROWS",
        "condition": "args[1]<0"
      }
    ]
  },
  {
    "signature": "commonPrefix(java.lang.CharSequence a,java.lang.CharSequence b)",
    "name": "commonPrefix",
    "containingClass": {
      "qualifiedName": "com.google.common.base.Strings",
      "name": "Strings",
      "isArray": false
    },
    "targetClass": "com.google.common.base.Strings",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.CharSequence",
          "name": "CharSequence",
          "isArray": false
        },
        "name": "a"
      },
      {
        "type": {
          "qualifiedName": "java.lang.CharSequence",
          "name": "CharSequence",
          "isArray": false
        },
        "name": "b"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "commonSuffix(java.lang.CharSequence a,java.lang.CharSequence b)",
    "name": "commonSuffix",
    "containingClass": {
      "qualifiedName": "com.google.common.base.Strings",
      "name": "Strings",
      "isArray": false
    },
    "targetClass": "com.google.common.base.Strings",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.CharSequence",
          "name": "CharSequence",
          "isArray": false
        },
        "name": "a"
      },
      {
        "type": {
          "qualifiedName": "java.lang.CharSequence",
          "name": "CharSequence",
          "isArray": false
        },
        "name": "b"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "validSurrogatePairAt(java.lang.CharSequence string,int index)",
    "name": "validSurrogatePairAt",
    "containingClass": {
      "qualifiedName": "com.google.common.base.Strings",
      "name": "Strings",
      "isArray": false
    },
    "targetClass": "com.google.common.base.Strings",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.CharSequence",
          "name": "CharSequence",
          "isArray": false
        },
        "name": "string"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "index"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  }
]
