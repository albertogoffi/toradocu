[
  {
    "signature": "ConcurrentHashMultiset(java.util.concurrent.ConcurrentMap countMap)",
    "name": "ConcurrentHashMultiset",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.ConcurrentHashMultiset",
      "name": "ConcurrentHashMultiset",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.ConcurrentHashMultiset",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.concurrent.ConcurrentMap",
          "name": "ConcurrentMap",
          "isArray": false
        },
        "name": "countMap"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.concurrent.ConcurrentMap",
            "name": "ConcurrentMap",
            "isArray": false
          },
          "name": "countMap"
        },
        "comment": "backing map for storing the elements in the multiset and their counts. It must be empty.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [
          "countMap"
        ],
        "comment": "if countMap is not empty",
        "kind": "THROWS",
        "condition": "(args[0].isEmpty()) == false"
      }
    ]
  },
  {
    "signature": "create()",
    "name": "create",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.ConcurrentHashMultiset",
      "name": "ConcurrentHashMultiset",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.ConcurrentHashMultiset",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.collect.ConcurrentHashMultiset",
      "name": "ConcurrentHashMultiset",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "create(java.lang.Iterable elements)",
    "name": "create",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.ConcurrentHashMultiset",
      "name": "ConcurrentHashMultiset",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.ConcurrentHashMultiset",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.collect.ConcurrentHashMultiset",
      "name": "ConcurrentHashMultiset",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Iterable",
          "name": "Iterable",
          "isArray": false
        },
        "name": "elements"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Iterable",
            "name": "Iterable",
            "isArray": false
          },
          "name": "elements"
        },
        "comment": "the elements that the multiset should contain",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "create(com.google.common.collect.MapMaker mapMaker)",
    "name": "create",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.ConcurrentHashMultiset",
      "name": "ConcurrentHashMultiset",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.ConcurrentHashMultiset",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.collect.ConcurrentHashMultiset",
      "name": "ConcurrentHashMultiset",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.common.collect.MapMaker",
          "name": "MapMaker",
          "isArray": false
        },
        "name": "mapMaker"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "count(java.lang.Object element)",
    "name": "count",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.ConcurrentHashMultiset",
      "name": "ConcurrentHashMultiset",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.ConcurrentHashMultiset",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "element",
        "nullable": true
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          },
          "name": "element",
          "nullable": true
        },
        "comment": "the element to look for",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the nonnegative number of occurrences of the element",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "size()",
    "name": "size",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.ConcurrentHashMultiset",
      "name": "ConcurrentHashMultiset",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.ConcurrentHashMultiset",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "toArray()",
    "name": "toArray",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.ConcurrentHashMultiset",
      "name": "ConcurrentHashMultiset",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.ConcurrentHashMultiset",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Object[]",
      "name": "Object[]",
      "isArray": true,
      "componentType": {
        "qualifiedName": "java.lang.Object",
        "name": "Object",
        "isArray": false
      }
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "toArray(java.lang.Object[] array)",
    "name": "toArray",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.ConcurrentHashMultiset",
      "name": "ConcurrentHashMultiset",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.ConcurrentHashMultiset",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "T[]",
      "name": "T[]",
      "isArray": true,
      "componentType": {
        "qualifiedName": "T",
        "name": "T",
        "isArray": false
      }
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object[]",
          "name": "Object[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          }
        },
        "name": "array"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "add(java.lang.Object element,int occurrences)",
    "name": "add",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.ConcurrentHashMultiset",
      "name": "ConcurrentHashMultiset",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.ConcurrentHashMultiset",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "element"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "occurrences"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          },
          "name": "element"
        },
        "comment": "the element to add",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "occurrences"
        },
        "comment": "the number of occurrences to add",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the previous count of the element before the operation; possibly zero",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [
          "occurrences",
          "Integer.MAX_VALUE"
        ],
        "comment": "if occurrences is negative, or if the resulting amount would exceed Integer.MAX_VALUE",
        "kind": "THROWS",
        "condition": "args[1]<0"
      }
    ]
  },
  {
    "signature": "remove(java.lang.Object element,int occurrences)",
    "name": "remove",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.ConcurrentHashMultiset",
      "name": "ConcurrentHashMultiset",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.ConcurrentHashMultiset",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "element",
        "nullable": true
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "occurrences"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          },
          "name": "element",
          "nullable": true
        },
        "comment": "the element whose occurrences should be removed",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "occurrences"
        },
        "comment": "the number of occurrences of the element to remove",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the count of the element before the operation; possibly zero",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [
          "occurrences"
        ],
        "comment": "if occurrences is negative",
        "kind": "THROWS",
        "condition": "args[1]<0"
      }
    ]
  },
  {
    "signature": "removeExactly(java.lang.Object element,int occurrences)",
    "name": "removeExactly",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.ConcurrentHashMultiset",
      "name": "ConcurrentHashMultiset",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.ConcurrentHashMultiset",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "element",
        "nullable": true
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "occurrences"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          },
          "name": "element",
          "nullable": true
        },
        "comment": "the element to remove",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "occurrences"
        },
        "comment": "the number of occurrences of element to remove",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if the removal was possible (including if occurrences is zero)",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [
          "occurrences"
        ],
        "comment": "if occurrences is negative",
        "kind": "THROWS",
        "condition": "args[1]<0"
      }
    ]
  },
  {
    "signature": "setCount(java.lang.Object element,int count)",
    "name": "setCount",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.ConcurrentHashMultiset",
      "name": "ConcurrentHashMultiset",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.ConcurrentHashMultiset",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "element"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "count"
      }
    ],
    "paramTags": [],
    "returnTag": {
      "comment": "the count of element in the multiset before this call",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [
          "count"
        ],
        "comment": "if count is negative",
        "kind": "THROWS",
        "condition": "args[1]<0"
      }
    ]
  },
  {
    "signature": "setCount(java.lang.Object element,int expectedOldCount,int newCount)",
    "name": "setCount",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.ConcurrentHashMultiset",
      "name": "ConcurrentHashMultiset",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.ConcurrentHashMultiset",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "element"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "expectedOldCount"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "newCount"
      }
    ],
    "paramTags": [],
    "returnTag": {
      "comment": "true if the change was successful. This usually indicates that the multiset has been modified, but not always: in the case that expectedOldCount == newCount, the method will return true if the condition was met.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [
          "expectedOldCount",
          "newCount"
        ],
        "comment": "if expectedOldCount or newCount is negative",
        "kind": "THROWS",
        "condition": "args[1]<0 || args[2]<0"
      }
    ]
  },
  {
    "signature": "createElementSet()",
    "name": "createElementSet",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.ConcurrentHashMultiset",
      "name": "ConcurrentHashMultiset",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.ConcurrentHashMultiset",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Set",
      "name": "Set",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "createEntrySet()",
    "name": "createEntrySet",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.ConcurrentHashMultiset",
      "name": "ConcurrentHashMultiset",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.ConcurrentHashMultiset",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Set",
      "name": "Set",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "distinctElements()",
    "name": "distinctElements",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.ConcurrentHashMultiset",
      "name": "ConcurrentHashMultiset",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.ConcurrentHashMultiset",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "isEmpty()",
    "name": "isEmpty",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.ConcurrentHashMultiset",
      "name": "ConcurrentHashMultiset",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.ConcurrentHashMultiset",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "entryIterator()",
    "name": "entryIterator",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.ConcurrentHashMultiset",
      "name": "ConcurrentHashMultiset",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.ConcurrentHashMultiset",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Iterator",
      "name": "Iterator",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "clear()",
    "name": "clear",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.ConcurrentHashMultiset",
      "name": "ConcurrentHashMultiset",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.ConcurrentHashMultiset",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  }
]
