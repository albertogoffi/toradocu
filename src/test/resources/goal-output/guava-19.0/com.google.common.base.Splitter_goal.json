[
  {
    "signature": "on(char separator)",
    "name": "on",
    "containingClass": {
      "qualifiedName": "com.google.common.base.Splitter",
      "name": "Splitter",
      "isArray": false
    },
    "targetClass": "com.google.common.base.Splitter",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.base.Splitter",
      "name": "Splitter",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "char",
          "name": "char",
          "isArray": false
        },
        "name": "separator"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "char",
            "name": "char",
            "isArray": false
          },
          "name": "separator"
        },
        "comment": "the character to recognize as a separator",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a splitter, with default settings, that recognizes that separator",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "on(com.google.common.base.CharMatcher separatorMatcher)",
    "name": "on",
    "containingClass": {
      "qualifiedName": "com.google.common.base.Splitter",
      "name": "Splitter",
      "isArray": false
    },
    "targetClass": "com.google.common.base.Splitter",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.base.Splitter",
      "name": "Splitter",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.common.base.CharMatcher",
          "name": "CharMatcher",
          "isArray": false
        },
        "name": "separatorMatcher"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.common.base.CharMatcher",
            "name": "CharMatcher",
            "isArray": false
          },
          "name": "separatorMatcher"
        },
        "comment": "a CharMatcher that determines whether a character is a separator",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a splitter, with default settings, that uses this matcher",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "on(java.lang.String separator)",
    "name": "on",
    "containingClass": {
      "qualifiedName": "com.google.common.base.Splitter",
      "name": "Splitter",
      "isArray": false
    },
    "targetClass": "com.google.common.base.Splitter",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.base.Splitter",
      "name": "Splitter",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "separator"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "separator"
        },
        "comment": "the literal, nonempty string to recognize as a separator",
        "kind": "PARAM",
        "condition": "(args[0]==null) == false"
      }
    ],
    "returnTag": {
      "comment": "a splitter, with default settings, that recognizes that separator",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "on(java.util.regex.Pattern separatorPattern)",
    "name": "on",
    "containingClass": {
      "qualifiedName": "com.google.common.base.Splitter",
      "name": "Splitter",
      "isArray": false
    },
    "targetClass": "com.google.common.base.Splitter",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.base.Splitter",
      "name": "Splitter",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.regex.Pattern",
          "name": "Pattern",
          "isArray": false
        },
        "name": "separatorPattern"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.regex.Pattern",
            "name": "Pattern",
            "isArray": false
          },
          "name": "separatorPattern"
        },
        "comment": "the pattern that determines whether a subsequence is a separator. This pattern may not match the empty string.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a splitter, with default settings, that uses this pattern",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [
          "separatorPattern"
        ],
        "comment": "if separatorPattern matches the empty string",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "onPattern(java.lang.String separatorPattern)",
    "name": "onPattern",
    "containingClass": {
      "qualifiedName": "com.google.common.base.Splitter",
      "name": "Splitter",
      "isArray": false
    },
    "targetClass": "com.google.common.base.Splitter",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.base.Splitter",
      "name": "Splitter",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "separatorPattern"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "separatorPattern"
        },
        "comment": "the pattern that determines whether a subsequence is a separator. This pattern may not match the empty string.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a splitter, with default settings, that uses this pattern",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.util.regex.PatternSyntaxException",
          "name": "PatternSyntaxException",
          "isArray": false
        },
        "codeTags": [
          "separatorPattern"
        ],
        "comment": "if separatorPattern is a malformed expression",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [
          "separatorPattern"
        ],
        "comment": "if separatorPattern matches the empty string",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "fixedLength(int length)",
    "name": "fixedLength",
    "containingClass": {
      "qualifiedName": "com.google.common.base.Splitter",
      "name": "Splitter",
      "isArray": false
    },
    "targetClass": "com.google.common.base.Splitter",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.base.Splitter",
      "name": "Splitter",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "length"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "length"
        },
        "comment": "the desired length of pieces after splitting, a positive integer",
        "kind": "PARAM",
        "condition": "args[0]>0"
      }
    ],
    "returnTag": {
      "comment": "a splitter, with default settings, that can split into fixed sized pieces",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [
          "length"
        ],
        "comment": "if length is zero or negative",
        "kind": "THROWS",
        "condition": "args[0]==0 || args[0]<0"
      }
    ]
  },
  {
    "signature": "omitEmptyStrings()",
    "name": "omitEmptyStrings",
    "containingClass": {
      "qualifiedName": "com.google.common.base.Splitter",
      "name": "Splitter",
      "isArray": false
    },
    "targetClass": "com.google.common.base.Splitter",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.base.Splitter",
      "name": "Splitter",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "a splitter with the desired configuration",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "limit(int limit)",
    "name": "limit",
    "containingClass": {
      "qualifiedName": "com.google.common.base.Splitter",
      "name": "Splitter",
      "isArray": false
    },
    "targetClass": "com.google.common.base.Splitter",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.base.Splitter",
      "name": "Splitter",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "limit"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "limit"
        },
        "comment": "the maximum number of items returned",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a splitter with the desired configuration",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "trimResults()",
    "name": "trimResults",
    "containingClass": {
      "qualifiedName": "com.google.common.base.Splitter",
      "name": "Splitter",
      "isArray": false
    },
    "targetClass": "com.google.common.base.Splitter",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.base.Splitter",
      "name": "Splitter",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "a splitter with the desired configuration",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "trimResults(com.google.common.base.CharMatcher trimmer)",
    "name": "trimResults",
    "containingClass": {
      "qualifiedName": "com.google.common.base.Splitter",
      "name": "Splitter",
      "isArray": false
    },
    "targetClass": "com.google.common.base.Splitter",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.base.Splitter",
      "name": "Splitter",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.common.base.CharMatcher",
          "name": "CharMatcher",
          "isArray": false
        },
        "name": "trimmer"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.common.base.CharMatcher",
            "name": "CharMatcher",
            "isArray": false
          },
          "name": "trimmer"
        },
        "comment": "a CharMatcher that determines whether a character should be removed from the beginning/end of a subsequence",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a splitter with the desired configuration",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "split(java.lang.CharSequence sequence)",
    "name": "split",
    "containingClass": {
      "qualifiedName": "com.google.common.base.Splitter",
      "name": "Splitter",
      "isArray": false
    },
    "targetClass": "com.google.common.base.Splitter",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Iterable",
      "name": "Iterable",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.CharSequence",
          "name": "CharSequence",
          "isArray": false
        },
        "name": "sequence"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.CharSequence",
            "name": "CharSequence",
            "isArray": false
          },
          "name": "sequence"
        },
        "comment": "the sequence of characters to split",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "an iteration over the segments split from the parameter.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "splitToList(java.lang.CharSequence sequence)",
    "name": "splitToList",
    "containingClass": {
      "qualifiedName": "com.google.common.base.Splitter",
      "name": "Splitter",
      "isArray": false
    },
    "targetClass": "com.google.common.base.Splitter",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List",
      "name": "List",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.CharSequence",
          "name": "CharSequence",
          "isArray": false
        },
        "name": "sequence"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.CharSequence",
            "name": "CharSequence",
            "isArray": false
          },
          "name": "sequence"
        },
        "comment": "the sequence of characters to split",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "an immutable list of the segments split from the parameter",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "withKeyValueSeparator(java.lang.String separator)",
    "name": "withKeyValueSeparator",
    "containingClass": {
      "qualifiedName": "com.google.common.base.Splitter",
      "name": "Splitter",
      "isArray": false
    },
    "targetClass": "com.google.common.base.Splitter",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.base.Splitter.MapSplitter",
      "name": "MapSplitter",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "separator"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "withKeyValueSeparator(char separator)",
    "name": "withKeyValueSeparator",
    "containingClass": {
      "qualifiedName": "com.google.common.base.Splitter",
      "name": "Splitter",
      "isArray": false
    },
    "targetClass": "com.google.common.base.Splitter",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.base.Splitter.MapSplitter",
      "name": "MapSplitter",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "char",
          "name": "char",
          "isArray": false
        },
        "name": "separator"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "withKeyValueSeparator(com.google.common.base.Splitter keyValueSplitter)",
    "name": "withKeyValueSeparator",
    "containingClass": {
      "qualifiedName": "com.google.common.base.Splitter",
      "name": "Splitter",
      "isArray": false
    },
    "targetClass": "com.google.common.base.Splitter",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.base.Splitter.MapSplitter",
      "name": "MapSplitter",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.common.base.Splitter",
          "name": "Splitter",
          "isArray": false
        },
        "name": "keyValueSplitter"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  }
]
