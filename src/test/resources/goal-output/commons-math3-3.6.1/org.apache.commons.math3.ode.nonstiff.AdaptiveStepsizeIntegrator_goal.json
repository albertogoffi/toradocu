[
  {
    "signature": "AdaptiveStepsizeIntegrator(java.lang.String name,double minStep,double maxStep,double scalAbsoluteTolerance,double scalRelativeTolerance)",
    "name": "AdaptiveStepsizeIntegrator",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator",
      "name": "AdaptiveStepsizeIntegrator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "name"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "minStep"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "maxStep"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "scalAbsoluteTolerance"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "scalRelativeTolerance"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "name"
        },
        "comment": "name of the method",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "minStep"
        },
        "comment": "minimal step (sign is irrelevant, regardless of integration direction, forward or backward), the last step can be smaller than this",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "maxStep"
        },
        "comment": "maximal step (sign is irrelevant, regardless of integration direction, forward or backward), the last step can be smaller than this",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "scalAbsoluteTolerance"
        },
        "comment": "allowed absolute error",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "scalRelativeTolerance"
        },
        "comment": "allowed relative error",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "AdaptiveStepsizeIntegrator(java.lang.String name,double minStep,double maxStep,double[] vecAbsoluteTolerance,double[] vecRelativeTolerance)",
    "name": "AdaptiveStepsizeIntegrator",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator",
      "name": "AdaptiveStepsizeIntegrator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "name"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "minStep"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "maxStep"
      },
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "vecAbsoluteTolerance"
      },
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "vecRelativeTolerance"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "name"
        },
        "comment": "name of the method",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "minStep"
        },
        "comment": "minimal step (sign is irrelevant, regardless of integration direction, forward or backward), the last step can be smaller than this",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "maxStep"
        },
        "comment": "maximal step (sign is irrelevant, regardless of integration direction, forward or backward), the last step can be smaller than this",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "vecAbsoluteTolerance"
        },
        "comment": "allowed absolute error",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "vecRelativeTolerance"
        },
        "comment": "allowed relative error",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "setStepSizeControl(double minimalStep,double maximalStep,double absoluteTolerance,double relativeTolerance)",
    "name": "setStepSizeControl",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator",
      "name": "AdaptiveStepsizeIntegrator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "minimalStep"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "maximalStep"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "absoluteTolerance"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "relativeTolerance"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "minimalStep"
        },
        "comment": "minimal step (must be positive even for backward integration), the last step can be smaller than this",
        "kind": "PARAM",
        "condition": "args[0]>0"
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "maximalStep"
        },
        "comment": "maximal step (must be positive even for backward integration)",
        "kind": "PARAM",
        "condition": "args[1]>0"
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "absoluteTolerance"
        },
        "comment": "allowed absolute error",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "relativeTolerance"
        },
        "comment": "allowed relative error",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "setStepSizeControl(double minimalStep,double maximalStep,double[] absoluteTolerance,double[] relativeTolerance)",
    "name": "setStepSizeControl",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator",
      "name": "AdaptiveStepsizeIntegrator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "minimalStep"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "maximalStep"
      },
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "absoluteTolerance"
      },
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "relativeTolerance"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "minimalStep"
        },
        "comment": "minimal step (must be positive even for backward integration), the last step can be smaller than this",
        "kind": "PARAM",
        "condition": "args[0]>0"
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "maximalStep"
        },
        "comment": "maximal step (must be positive even for backward integration)",
        "kind": "PARAM",
        "condition": "args[1]>0"
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "absoluteTolerance"
        },
        "comment": "allowed absolute error",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "relativeTolerance"
        },
        "comment": "allowed relative error",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "setInitialStepSize(double initialStepSize)",
    "name": "setInitialStepSize",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator",
      "name": "AdaptiveStepsizeIntegrator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "initialStepSize"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "initialStepSize"
        },
        "comment": "initial step size to use (must be positive even for backward integration ; providing a negative value or a value outside of the min/max step interval will lead the integrator to ignore the value and compute the initial step size by itself)",
        "kind": "PARAM",
        "condition": "args[0]>0"
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "sanityChecks(org.apache.commons.math3.ode.ExpandableStatefulODE equations,double t)",
    "name": "sanityChecks",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator",
      "name": "AdaptiveStepsizeIntegrator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.ode.ExpandableStatefulODE",
          "name": "ExpandableStatefulODE",
          "isArray": false
        },
        "name": "equations"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "t"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "initializeStep(boolean forward,int order,double[] scale,double t0,double[] y0,double[] yDot0,double[] y1,double[] yDot1)",
    "name": "initializeStep",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator",
      "name": "AdaptiveStepsizeIntegrator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "forward"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "order"
      },
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "scale"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "t0"
      },
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "y0"
      },
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "yDot0"
      },
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "y1"
      },
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "yDot1"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "forward"
        },
        "comment": "forward integration indicator",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "order"
        },
        "comment": "order of the method",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "scale"
        },
        "comment": "scaling vector for the state vector (can be shorter than state vector)",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "t0"
        },
        "comment": "start time",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "y0"
        },
        "comment": "state vector at t0",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "yDot0"
        },
        "comment": "first time derivative of y0",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "y1"
        },
        "comment": "work array for a state vector",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "yDot1"
        },
        "comment": "work array for the first time derivative of y1",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "first integration step",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "org.apache.commons.math3.exception.MaxCountExceededException",
          "name": "MaxCountExceededException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if the number of functions evaluations is exceeded",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exceptionType": {
          "qualifiedName": "org.apache.commons.math3.exception.DimensionMismatchException",
          "name": "DimensionMismatchException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if arrays dimensions do not match equations settings",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "filterStep(double h,boolean forward,boolean acceptSmall)",
    "name": "filterStep",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator",
      "name": "AdaptiveStepsizeIntegrator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "h"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "forward"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "acceptSmall"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "h"
        },
        "comment": "signed step",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "forward"
        },
        "comment": "forward integration indicator",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "acceptSmall"
        },
        "comment": "if true, steps smaller than the minimal value are silently increased up to this value, if false such small steps generate an exception",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a bounded integration step (h if no bound is reach, or a bounded value)",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "org.apache.commons.math3.exception.NumberIsTooSmallException",
          "name": "NumberIsTooSmallException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if the step is too small and acceptSmall is false",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "integrate(org.apache.commons.math3.ode.ExpandableStatefulODE equations,double t)",
    "name": "integrate",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator",
      "name": "AdaptiveStepsizeIntegrator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.ode.ExpandableStatefulODE",
          "name": "ExpandableStatefulODE",
          "isArray": false
        },
        "name": "equations"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "t"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getCurrentStepStart()",
    "name": "getCurrentStepStart",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator",
      "name": "AdaptiveStepsizeIntegrator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "resetInternalState()",
    "name": "resetInternalState",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator",
      "name": "AdaptiveStepsizeIntegrator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getMinStep()",
    "name": "getMinStep",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator",
      "name": "AdaptiveStepsizeIntegrator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "minimal step",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getMaxStep()",
    "name": "getMaxStep",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator",
      "name": "AdaptiveStepsizeIntegrator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "maximal step",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  }
]
