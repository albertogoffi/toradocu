[
  {
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm",
      "name": "PolynomialFunctionNewtonForm",
      "isArray": false
    },
    "name": "PolynomialFunctionNewtonForm",
    "parameters": [
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "a"
      },
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "c"
      }
    ],
    "isVarArgs": false,
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.NullArgumentException",
          "name": "NullArgumentException",
          "isArray": false
        },
        "comment": "if any argument is null.",
        "condition": "args[0]==null || args[1]==null"
      },
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.NoDataException",
          "name": "NoDataException",
          "isArray": false
        },
        "comment": "if any array has zero length.",
	"condition": "args[0].length==0 || args[1].length==0"
      },
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.DimensionMismatchException",
          "name": "DimensionMismatchException",
          "isArray": false
        },
        "comment": "if the size difference between a and c is not equal to 1.",
        "condition": "((args[0].length - args[1].length) == 1) == false"
      }
    ],
    "signature": "PolynomialFunctionNewtonForm(double[] a,double[] c)"
  },
  {
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm",
      "name": "PolynomialFunctionNewtonForm",
      "isArray": false
    },
    "name": "value",
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "z"
      }
    ],
    "isVarArgs": false,
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "comment": "when the activated method itself can ascertain that a precondition, specified in the API expressed at the level of the activated method, has been violated. When Commons Math throws an IllegalArgumentException, it is usually the consequence of checking the actual parameters passed to the method.",
        "condition": ""
      }
    ],
    "signature": "value(double z)"
  },
  {
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm",
      "name": "PolynomialFunctionNewtonForm",
      "isArray": false
    },
    "name": "value",
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.analysis.differentiation.DerivativeStructure",
      "name": "DerivativeStructure",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.analysis.differentiation.DerivativeStructure",
          "name": "DerivativeStructure",
          "isArray": false
        },
        "name": "t"
      }
    ],
    "isVarArgs": false,
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.DimensionMismatchException",
          "name": "DimensionMismatchException",
          "isArray": false
        },
        "comment": "if t is inconsistent with the function's free parameters or order",
        "condition": ""
      }
    ],
    "signature": "value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure t)"
  },
  {
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm",
      "name": "PolynomialFunctionNewtonForm",
      "isArray": false
    },
    "name": "degree",
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "isVarArgs": false,
    "throwsTags": [],
    "signature": "degree()"
  },
  {
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm",
      "name": "PolynomialFunctionNewtonForm",
      "isArray": false
    },
    "name": "getNewtonCoefficients",
    "returnType": {
      "qualifiedName": "double[]",
      "name": "double[]",
      "isArray": true,
      "componentType": {
        "qualifiedName": "double",
        "name": "double",
        "isArray": false
      }
    },
    "parameters": [],
    "isVarArgs": false,
    "throwsTags": [],
    "signature": "getNewtonCoefficients()"
  },
  {
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm",
      "name": "PolynomialFunctionNewtonForm",
      "isArray": false
    },
    "name": "getCenters",
    "returnType": {
      "qualifiedName": "double[]",
      "name": "double[]",
      "isArray": true,
      "componentType": {
        "qualifiedName": "double",
        "name": "double",
        "isArray": false
      }
    },
    "parameters": [],
    "isVarArgs": false,
    "throwsTags": [],
    "signature": "getCenters()"
  },
  {
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm",
      "name": "PolynomialFunctionNewtonForm",
      "isArray": false
    },
    "name": "getCoefficients",
    "returnType": {
      "qualifiedName": "double[]",
      "name": "double[]",
      "isArray": true,
      "componentType": {
        "qualifiedName": "double",
        "name": "double",
        "isArray": false
      }
    },
    "parameters": [],
    "isVarArgs": false,
    "throwsTags": [],
    "signature": "getCoefficients()"
  },
  {
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm",
      "name": "PolynomialFunctionNewtonForm",
      "isArray": false
    },
    "name": "evaluate",
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "a"
      },
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "c"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "z"
      }
    ],
    "isVarArgs": false,
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.NullArgumentException",
          "name": "NullArgumentException",
          "isArray": false
        },
        "comment": "if any argument is null.",
        "condition": "args[0]==null || args[1]==null || args[2]==null"
      },
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.NoDataException",
          "name": "NoDataException",
          "isArray": false
        },
        "comment": "if any array has zero length.",
        "condition": "args[0].length==0 || args[1].length==0"
      },
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.DimensionMismatchException",
          "name": "DimensionMismatchException",
          "isArray": false
        },
        "comment": "if the size difference between a and c is not equal to 1.",
        "condition": "((args[0].lenght - args[1].length)==1) == false"
      }
    ],
    "signature": "evaluate(double[] a,double[] c,double z)"
  },
  {
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm",
      "name": "PolynomialFunctionNewtonForm",
      "isArray": false
    },
    "name": "computeCoefficients",
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "isVarArgs": false,
    "throwsTags": [],
    "signature": "computeCoefficients()"
  },
  {
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm",
      "name": "PolynomialFunctionNewtonForm",
      "isArray": false
    },
    "name": "verifyInputArray",
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "a"
      },
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "c"
      }
    ],
    "isVarArgs": false,
    "throwsTags": [
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.NullArgumentException",
          "name": "NullArgumentException",
          "isArray": false
        },
        "comment": "if any argument is null.",
        "condition": "args[0]==null || args[1]==null"
      },
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.NoDataException",
          "name": "NoDataException",
          "isArray": false
        },
        "comment": "if any array has zero length.",
        "condition": "args[0].length==0 || args[1].length==0"
      },
      {
        "exception": {
          "qualifiedName": "org.apache.commons.math3.exception.DimensionMismatchException",
          "name": "DimensionMismatchException",
          "isArray": false
        },
        "comment": "if the size difference between a and c is not equal to 1.",
        "condition": "((args[0].length - args[1].length)==1) == false"
      }
    ],
    "signature": "verifyInputArray(double[] a,double[] c)"
  }
]
