[
  {
    "signature": "org.apache.commons.math3.geometry.euclidean.oned.Interval(double lower, double upper)",
    "name": "org.apache.commons.math3.geometry.euclidean.oned.Interval",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.geometry.euclidean.oned.Interval",
      "name": "Interval",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.geometry.euclidean.oned.Interval",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "lower"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "upper"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "lower"
        },
        "comment": "lower bound of the interval.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "upper"
        },
        "comment": "upper bound of the interval.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "getInf()",
    "name": "getInf",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.geometry.euclidean.oned.Interval",
      "name": "Interval",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.geometry.euclidean.oned.Interval",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "lower bound of the interval.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getLower()",
    "name": "getLower",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.geometry.euclidean.oned.Interval",
      "name": "Interval",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.geometry.euclidean.oned.Interval",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "lower bound of the interval.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getSup()",
    "name": "getSup",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.geometry.euclidean.oned.Interval",
      "name": "Interval",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.geometry.euclidean.oned.Interval",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "upper bound of the interval.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getUpper()",
    "name": "getUpper",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.geometry.euclidean.oned.Interval",
      "name": "Interval",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.geometry.euclidean.oned.Interval",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "upper bound of the interval.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getSize()",
    "name": "getSize",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.geometry.euclidean.oned.Interval",
      "name": "Interval",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.geometry.euclidean.oned.Interval",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "size of the interval.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getLength()",
    "name": "getLength",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.geometry.euclidean.oned.Interval",
      "name": "Interval",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.geometry.euclidean.oned.Interval",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "length of the interval.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getBarycenter()",
    "name": "getBarycenter",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.geometry.euclidean.oned.Interval",
      "name": "Interval",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.geometry.euclidean.oned.Interval",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "barycenter of the interval.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getMidPoint()",
    "name": "getMidPoint",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.geometry.euclidean.oned.Interval",
      "name": "Interval",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.geometry.euclidean.oned.Interval",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "midpoint of the interval.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "checkPoint(double point, double tolerance)",
    "name": "checkPoint",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.geometry.euclidean.oned.Interval",
      "name": "Interval",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.geometry.euclidean.oned.Interval",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.geometry.partitioning.Region$Location",
      "name": "org.apache.commons.math3.geometry.partitioning.Region$Location",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "point"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "tolerance"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "point"
        },
        "comment": "point to check.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "tolerance"
        },
        "comment": "tolerance below which points are considered to belong to the boundary.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a code representing the point status: either Location#INSIDE, Location#OUTSIDE or Location#BOUNDARY.",
      "kind": "RETURN",
      "condition": "methodResultID.equals(Location.INSIDE) || methodResultID.equals(Location.OUTSIDE) || methodResultID.equals(Location.BOUNDARY)"
    },
    "throwsTags": []
  }
]
