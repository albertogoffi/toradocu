[
  {
    "signature": "LoessInterpolator()",
    "name": "LoessInterpolator",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.analysis.interpolation.LoessInterpolator",
      "name": "LoessInterpolator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.analysis.interpolation.LoessInterpolator",
    "isVarArgs": false,
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "LoessInterpolator(double bandwidth,int robustnessIters)",
    "name": "LoessInterpolator",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.analysis.interpolation.LoessInterpolator",
      "name": "LoessInterpolator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.analysis.interpolation.LoessInterpolator",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "bandwidth"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "robustnessIters"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "bandwidth"
        },
        "comment": "when computing the loess fit at a particular point, this fraction of source points closest to the current point is taken into account for computing a least-squares regression. A sensible value is usually 0.25 to 0.5, the default value is DEFAULT_BANDWIDTH.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "robustnessIters"
        },
        "comment": "This many robustness iterations are done. A sensible value is usually 0 (just the initial fit without any robustness iterations) to 4, the default value is DEFAULT_ROBUSTNESS_ITERS.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "LoessInterpolator(double bandwidth,int robustnessIters,double accuracy)",
    "name": "LoessInterpolator",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.analysis.interpolation.LoessInterpolator",
      "name": "LoessInterpolator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.analysis.interpolation.LoessInterpolator",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "bandwidth"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "robustnessIters"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "accuracy"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "bandwidth"
        },
        "comment": "when computing the loess fit at a particular point, this fraction of source points closest to the current point is taken into account for computing a least-squares regression. A sensible value is usually 0.25 to 0.5, the default value is DEFAULT_BANDWIDTH.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "robustnessIters"
        },
        "comment": "This many robustness iterations are done. A sensible value is usually 0 (just the initial fit without any robustness iterations) to 4, the default value is DEFAULT_ROBUSTNESS_ITERS.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "accuracy"
        },
        "comment": "If the median residual at a certain robustness iteration is less than this amount, no more iterations are done.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "org.apache.commons.math3.exception.OutOfRangeException",
          "name": "OutOfRangeException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if bandwidth does not lie in the interval [0,1].",
        "kind": "THROWS",
        "condition": "args[0]<0 || args[0]>1"
      },
      {
        "exceptionType": {
          "qualifiedName": "org.apache.commons.math3.exception.NotPositiveException",
          "name": "NotPositiveException",
          "isArray": false
        },
        "codeTags": [
          "robustnessIters"
        ],
        "comment": "if robustnessIters is negative.",
        "kind": "THROWS",
        "condition": "args[1]<0"
      }
    ]
  },
  {
    "signature": "interpolate(double[] xval,double[] yval)",
    "name": "interpolate",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.analysis.interpolation.LoessInterpolator",
      "name": "LoessInterpolator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.analysis.interpolation.LoessInterpolator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction",
      "name": "PolynomialSplineFunction",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "xval"
      },
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "yval"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "xval"
        },
        "comment": "the arguments for the interpolation points",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "yval"
        },
        "comment": "the values for the interpolation points",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A cubic spline built upon a loess fit to the data at the original abscissae",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "org.apache.commons.math3.exception.NonMonotonicSequenceException",
          "name": "NonMonotonicSequenceException",
          "isArray": false
        },
        "codeTags": [
          "xval"
        ],
        "comment": "if xval not sorted in strictly increasing order.",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exceptionType": {
          "qualifiedName": "org.apache.commons.math3.exception.DimensionMismatchException",
          "name": "DimensionMismatchException",
          "isArray": false
        },
        "codeTags": [
          "xval",
          "yval"
        ],
        "comment": "if xval and yval have different sizes.",
        "kind": "THROWS",
        "condition": "((args[0].length) == (args[1].length)) == false"
      },
      {
        "exceptionType": {
          "qualifiedName": "org.apache.commons.math3.exception.NoDataException",
          "name": "NoDataException",
          "isArray": false
        },
        "codeTags": [
          "xval",
          "yval"
        ],
        "comment": "if xval or yval has zero size.",
        "kind": "THROWS",
        "condition": "args[0].length==0 || args[1].length==0"
      },
      {
        "exceptionType": {
          "qualifiedName": "org.apache.commons.math3.exception.NotFiniteNumberException",
          "name": "NotFiniteNumberException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if any of the arguments and values are not finite real numbers.",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exceptionType": {
          "qualifiedName": "org.apache.commons.math3.exception.NumberIsTooSmallException",
          "name": "NumberIsTooSmallException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if the bandwidth is too small to accomodate the size of the input data (i.e. the bandwidth must be larger than 2/n).",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "smooth(double[] xval,double[] yval,double[] weights)",
    "name": "smooth",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.analysis.interpolation.LoessInterpolator",
      "name": "LoessInterpolator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.analysis.interpolation.LoessInterpolator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double[]",
      "name": "double[]",
      "isArray": true,
      "componentType": {
        "qualifiedName": "double",
        "name": "double",
        "isArray": false
      }
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "xval"
      },
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "yval"
      },
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "weights"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "xval"
        },
        "comment": "Arguments for the interpolation points.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "yval"
        },
        "comment": "Values for the interpolation points.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "weights"
        },
        "comment": "point weights: coefficients by which the robustness weight of a point is multiplied.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the values of the loess fit at corresponding original abscissae.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "org.apache.commons.math3.exception.NonMonotonicSequenceException",
          "name": "NonMonotonicSequenceException",
          "isArray": false
        },
        "codeTags": [
          "xval"
        ],
        "comment": "if xval not sorted in strictly increasing order.",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exceptionType": {
          "qualifiedName": "org.apache.commons.math3.exception.DimensionMismatchException",
          "name": "DimensionMismatchException",
          "isArray": false
        },
        "codeTags": [
          "xval",
          "yval"
        ],
        "comment": "if xval and yval have different sizes.",
        "kind": "THROWS",
        "condition": "((args[0].length) == (args[1].length)) == false"
      },
      {
        "exceptionType": {
          "qualifiedName": "org.apache.commons.math3.exception.NoDataException",
          "name": "NoDataException",
          "isArray": false
        },
        "codeTags": [
          "xval",
          "yval"
        ],
        "comment": "if xval or yval has zero size.",
        "kind": "THROWS",
        "condition": "args[0].length==0 || args[1].length==0"
      },
      {
        "exceptionType": {
          "qualifiedName": "org.apache.commons.math3.exception.NotFiniteNumberException",
          "name": "NotFiniteNumberException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if any of the arguments and values are not finite real numbers.",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exceptionType": {
          "qualifiedName": "org.apache.commons.math3.exception.NumberIsTooSmallException",
          "name": "NumberIsTooSmallException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if the bandwidth is too small to accomodate the size of the input data (i.e. the bandwidth must be larger than 2/n).",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "smooth(double[] xval,double[] yval)",
    "name": "smooth",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.analysis.interpolation.LoessInterpolator",
      "name": "LoessInterpolator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.analysis.interpolation.LoessInterpolator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double[]",
      "name": "double[]",
      "isArray": true,
      "componentType": {
        "qualifiedName": "double",
        "name": "double",
        "isArray": false
      }
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "xval"
      },
      {
        "type": {
          "qualifiedName": "double[]",
          "name": "double[]",
          "isArray": true,
          "componentType": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          }
        },
        "name": "yval"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "xval"
        },
        "comment": "the arguments for the interpolation points",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double[]",
            "name": "double[]",
            "isArray": true,
            "componentType": {
              "qualifiedName": "double",
              "name": "double",
              "isArray": false
            }
          },
          "name": "yval"
        },
        "comment": "the values for the interpolation points",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "values of the loess fit at corresponding original abscissae",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "org.apache.commons.math3.exception.NonMonotonicSequenceException",
          "name": "NonMonotonicSequenceException",
          "isArray": false
        },
        "codeTags": [
          "xval"
        ],
        "comment": "if xval not sorted in strictly increasing order.",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exceptionType": {
          "qualifiedName": "org.apache.commons.math3.exception.DimensionMismatchException",
          "name": "DimensionMismatchException",
          "isArray": false
        },
        "codeTags": [
          "xval",
          "yval"
        ],
        "comment": "if xval and yval have different sizes.",
        "kind": "THROWS",
        "condition": "((args[0].length) == (args[1].length)) == false"
      },
      {
        "exceptionType": {
          "qualifiedName": "org.apache.commons.math3.exception.NoDataException",
          "name": "NoDataException",
          "isArray": false
        },
        "codeTags": [
          "xval",
          "yval"
        ],
        "comment": "if xval or yval has zero size.",
        "kind": "THROWS",
        "condition": "args[0].length==0 || args[1].length==0"
      },
      {
        "exceptionType": {
          "qualifiedName": "org.apache.commons.math3.exception.NotFiniteNumberException",
          "name": "NotFiniteNumberException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if any of the arguments and values are not finite real numbers.",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exceptionType": {
          "qualifiedName": "org.apache.commons.math3.exception.NumberIsTooSmallException",
          "name": "NumberIsTooSmallException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "if the bandwidth is too small to accomodate the size of the input data (i.e. the bandwidth must be larger than 2/n).",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  }
]
